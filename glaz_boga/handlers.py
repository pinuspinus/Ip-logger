# handlers/dyxless.py
from __future__ import annotations

import contextlib
import json
import re
from decimal import Decimal, ROUND_HALF_UP
from html import escape
from typing import Any

import httpx
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.db_api import get_balance, get_user, minus_balance

try:
    from config import DYXLESS_TOKEN
except Exception:
    DYXLESS_TOKEN = None

dyx_router = Router()

API_URL = "https://api-dyxless.cfd/query"
REQ_TIMEOUT = 12.0           # —Å–µ–∫
MAX_ITEMS_TO_SHOW = 5        # –º–∞–∫—Å–∏–º—É–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ data –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
MAX_JSON_LEN = 3500          # –µ—Å–ª–∏ –ø—Ä–µ–≤—å—é –¥–ª–∏–Ω–Ω–µ–µ ‚Äî –æ—Ç–¥–∞–¥–∏–º —Ñ–∞–π–ª–æ–º



back_to_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
)



# ---------- FSM ----------
class PersonStates(StatesGroup):
    waiting_query = State()


# ---------- helpers ----------

def topup_or_back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )

def _digits(s: str) -> str:
    return re.sub(r"\D+", "", s or "")

def _build_query_variants(raw: str) -> list[str]:
    """
    –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—É–º–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞:
      - –∫–∞–∫ –µ—Å—Ç—å
      - email ‚Üí lower
      - —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí —Ü–∏—Ñ—Ä—ã, 8‚Üí7, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 7 –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ 10
    """
    raw = (raw or "").strip()
    variants: list[str] = []
    if not raw:
        return variants

    variants.append(raw)

    # e-mail
    if "@" in raw and "." in raw:
        variants.append(raw.lower())

    # —Ç–µ–ª–µ—Ñ–æ–Ω
    d = _digits(raw)
    if len(d) >= 7:
        # –∫–∞–∫ –µ—Å—Ç—å (—Ü–∏—Ñ—Ä—ã)
        variants.append(d)
        # 8XXXXXXXXXX ‚Üí 7XXXXXXXXXX (–¥–ª—è –†–§)
        if len(d) in (10, 11) and d.startswith("8"):
            variants.append("7" + d[1:])
        # –µ—Å–ª–∏ 10 —Ü–∏—Ñ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã ‚Äî –¥–æ–±–∞–≤–∏–º 7
        if len(d) == 10 and not d.startswith(("7", "8")):
            variants.append("7" + d)
    # –æ—Å—Ç–∞–≤–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    seen = set()
    uniq = []
    for q in variants:
        if q not in seen:
            uniq.append(q)
            seen.add(q)
    return uniq

def _take_first_items(data: Any, n: int) -> Any:
    """
    –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞/–æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é.
    –ï—Å–ª–∏ data ‚Äî —Å–ø–∏—Å–æ–∫, —Ç–æ data[:n]; –µ—Å–ª–∏ dict ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
    """
    if isinstance(data, list):
        return data[:n]
    return data

def _pretty_json(obj: Any) -> str:
    return escape(json.dumps(obj, ensure_ascii=False, indent=2))

def _fmt_dec(d: Decimal) -> str:
    """
    –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ Decimal:
    - –≤—Å–µ–≥–¥–∞ 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    - –≤—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –≤–≤–µ—Ä—Ö
    """
    d_q = d.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
    return f"{d_q:.2f}"


# ---------- handlers ----------
@dyx_router.callback_query(F.data == "check_person_data")
async def on_check_person_data(cb: types.CallbackQuery, state: FSMContext):
    user = get_user(cb.from_user.id)
    if user and user.get("banned"):
        await cb.message.answer("‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ ‚õî")
        return

    cost = Decimal("1.00")
    bal = Decimal(str(get_balance(cb.from_user.id) or 0))

    if bal < cost:
        need = (cost - bal).quantize(Decimal("0.01"))
        await cb.message.edit_text(
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.\n\n"
            f"üìå –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} USDT\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: {_fmt_dec(bal)} USDT\n"
            f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {_fmt_dec(need)} USDT\n\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=topup_or_back_kb(),
        )
        await cb.answer()
        return
    if not DYXLESS_TOKEN:
        await cb.answer("–¢–æ–∫–µ–Ω API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return

    text = (
        "üîé <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –≤ –æ—Ç–≤–µ—Ç <b>–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</b> (—Ç–µ–ª–µ—Ñ–æ–Ω, email, –ª–æ–≥–∏–Ω –∏ —Ç.–ø.).\n"
        "–Ø –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ 1 USDT"
    )
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=back_to_menu)
    await state.set_state(PersonStates.waiting_query)
    await cb.answer()


@dyx_router.message(PersonStates.waiting_query, F.text)
async def do_check_person_data(msg: types.Message, state: FSMContext):
    user_input = (msg.text or "").strip()
    if not user_input:
        await msg.reply("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω/e-mail/—Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    await state.clear()
    wait = await msg.reply("‚è≥ –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å‚Ä¶")

    query_variants = _build_query_variants(user_input)
    if not query_variants:
        await wait.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞.")
        return

    headers = {"Content-Type": "application/json"}
    chosen_query = None
    last_resp = None
    last_status = None
    last_code = None

    try:
        async with httpx.AsyncClient(timeout=REQ_TIMEOUT) as client:
            for candidate in query_variants:
                payload = {"query": candidate, "token": DYXLESS_TOKEN}
                r = await client.post(API_URL, json=payload, headers=headers)
                last_code = r.status_code

                # —Å–µ—Ä–≤–µ—Ä –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ-JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä 401/403/500)
                try:
                    data = r.json()
                except ValueError:
                    last_resp = {"error": f"Non-JSON response, HTTP {r.status_code}"}
                    if r.status_code >= 500:
                        # –ø—Ä–∏ 5xx –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        break
                    continue

                last_resp = data
                last_status = bool(data.get("status"))
                counts = int(data.get("counts") or 0)

                # –µ—Å–ª–∏ API –≥–æ–≤–æ—Ä–∏—Ç –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                if not last_status:
                    continue

                # –Ω–∞—à–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
                if counts > 0:
                    chosen_query = candidate
                    break
            # –∫–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞
    except httpx.ReadTimeout:
        await wait.edit_text("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return
    except httpx.HTTPError as e:
        await wait.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {escape(str(e))}", parse_mode="HTML")
        return

    # –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤–æ–æ–±—â–µ
    if last_resp is None:
        await wait.edit_text(f"‚ö†Ô∏è API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP {last_code or 'n/a'}).")
        return

    # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª status=false –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if last_status is False:
        err_txt = last_resp.get("error") or last_resp.get("message") or f"API –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å false (HTTP {last_code})."
        await wait.edit_text(f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω: {escape(str(err_txt))}", parse_mode="HTML")
        return
    cost = Decimal('1.00')
    ok_spend, new_balance, _ = minus_balance(msg.from_user.id, cost)
    if not ok_spend:
        bal_txt = _fmt_dec(Decimal(str(new_balance))) if new_balance is not None else "0"
        need = (cost - Decimal(str(new_balance or 0))).quantize(Decimal("0.01")) if new_balance is not None else cost
        await msg.reply(
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞.\n\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: {bal_txt} USDT\n"
            f"üí∏ –ù—É–∂–Ω–æ: {_fmt_dec(cost)} USDT (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {_fmt_dec(need)})",
            reply_markup=topup_or_back_kb()
        )
        await state.clear()
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
    data = last_resp
    counts = int(data.get("counts") or 0)
    if counts == 0:
        diag = f"(HTTP {last_code}; –ø—Ä–æ–±–æ–≤–∞–ª–∏ {len(query_variants)} –≤–∞—Ä–∏–∞–Ω—Ç(–æ–≤))"
        await wait.edit_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ\n"
            f"üîé –ó–∞–ø—Ä–æ—Å: <code>{escape(user_input)}</code>\n"
            "üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: <b>0</b>\n",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return

    # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–≤—å—é
    data_array = data.get("data") or []
    preview = _take_first_items(data_array, MAX_ITEMS_TO_SHOW)
    pretty = _pretty_json(preview)

    head = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ\n"
        f"üîé –ó–∞–ø—Ä–æ—Å: <code>{escape(chosen_query or user_input)}</code>\n"
        f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: <b>{counts}</b>\n"
    )




    # –ò–Ω–∞—á–µ ‚Äî —Ñ–∞–π–ª–æ–º (–ø–æ–ª–Ω—ã–π data)
    from aiogram.types import FSInputFile
    import os, tempfile

    try:
        fd, path = tempfile.mkstemp(prefix="dyx_", suffix=".json")
        with os.fdopen(fd, "w", encoding="utf-8") as f:
            json.dump(data_array, f, ensure_ascii=False, indent=2)

        caption = head + "\nüìé –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏."
        await msg.answer_document(
            document=FSInputFile(path, filename="result.json"),
            caption=caption,
            parse_mode="HTML"
        )
        await wait.delete()
    finally:
        with contextlib.suppress(Exception):
            os.remove(path)