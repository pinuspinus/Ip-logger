import random
import re
import secrets
import sqlite3
import string
from decimal import Decimal, ROUND_DOWN, ROUND_UP, ROUND_HALF_UP
from typing import Optional, Tuple
from glaz_boga.handlers import dyx_router
import httpx
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import MessageEntityType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from cryptography.fernet import Fernet
import time
from payments.nowpayments.service import create_invoice as np_create_invoice, get_payment_status as np_get_payment_status
from admin.admin_hanlders import admin_router
from config import BOT_TOKEN, SECRET_KEY, SERVER_URL, DOMAIN, PREFERRED_SCHEME, CHANNEL_USERNAME, CHANNEL_INVITE_LINK, CHANNEL_ID
from database.db_api import (
    get_connection,
    add_user,
    get_user,
    get_balance,
    add_balance,
    minus_balance,
    get_links,            # –í–ê–ñ–ù–û: –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç users.id (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)
)
from payments.cryptopay.rates import get_rate_usdt
from payments.cryptopay.service import check_and_credit, create_topup_invoice
# –ò–º–ø–æ—Ä—Ç—ã (—É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–∏ –µ—Å—Ç—å —Å–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞)
import json
from payments.nowpayments.service import (
    list_payments_by_invoice as np_list_by_iid,
    get_payment_status as np_get_status,
)
from payments.nowpayments.repository import (
    get_nowp_invoice,
    update_nowp_payment_details, mark_nowp_paid)
from aiogram.enums import ChatMemberStatus
import contextlib
import ipaddress
import os
from uuid import uuid4
from aiogram.utils.markdown import code
from html import escape
  # ---- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
cipher = Fernet(SECRET_KEY)

dp.include_router(admin_router)
dp.include_router(dyx_router)

async def _get_username(user_id: int) -> str:
    try:
        user = await bot.get_chat(user_id)
        if user.username:
            return f"@{user.username}"
        elif user.full_name:
            return user.full_name
        else:
            return "‚Äî"
    except Exception:
        return "‚Äî"

# ---- –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ----


def _fmt_dec(d: Decimal) -> str:
    """
    –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ Decimal:
    - –≤—Å–µ–≥–¥–∞ 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    - –≤—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –≤–≤–µ—Ä—Ö
    """
    d_q = d.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
    return f"{d_q:.2f}"

# ---- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----

main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_panel"),
            InlineKeyboardButton(text="üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏", callback_data="my_links"),
        ],
        [
            InlineKeyboardButton(text="üõ† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="generate_link"),
            InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ–±–∏–≤ –ª–∏—á–Ω–æ—Å—Ç–∏", callback_data="check_person_data")
        ],
        [InlineKeyboardButton(text="‚úâÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞—Ä–æ–ª–µ–π –ø–æ –ø–æ—á—Ç–µ", callback_data="check_email_leak")],
        [InlineKeyboardButton(text="\U0001F4F9Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP –Ω–∞ —É—è–∑–≤–∏–º—ã–µ –∫–∞–º–µ—Ä—ã", callback_data="scan_cam")],
    ]
)

back_to_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
)

user_panel_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ]
)

payment_method_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ CryptoBot", callback_data="paymethod:cryptobot")],
        [InlineKeyboardButton(text="üåê NowPayment (150 –≤–∏–¥–æ–≤ –∫—Ä–∏–ø—Ç—ã)",
                              callback_data="paymethod:NowPayments")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_panel")],
    ]
)

def topup_or_back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )

def amounts_kb(asset: str, per_row: int = 2) -> InlineKeyboardMarkup:
    btns = [
        InlineKeyboardButton(text=f"üí≥ {a} {asset}", callback_data=f"amount:{asset}:{a}")
        for a in TOPUP_AMOUNTS
        if Decimal(a) >= MIN_AMOUNT.get(asset, Decimal("0"))
    ]
    rows = [btns[i : i + per_row] for i in range(0, len(btns), per_row)]
    rows.append(
        [
            InlineKeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data=f"amount_custom:{asset}"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="paymethod:cryptobot"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=rows)

def crypto_assets_kb() -> InlineKeyboardMarkup:
    rows, row = [], []
    for i, a in enumerate(SUPPORTED_ASSETS, start=1):
        row.append(InlineKeyboardButton(text=a, callback_data=f"asset:{a}"))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="paymethod:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π ----

SUPPORTED_ASSETS = ("USDT", "USDC", "TON", "BTC", "ETH", "LTC", "BNB", "TRX")

MIN_AMOUNT = {
    "USDT": Decimal("1"),
    "USDC": Decimal("1"),
    "TON":  Decimal("0.3"),
    "BTC":  Decimal("0.00005"),
    "ETH":  Decimal("0.0007"),
    "LTC":  Decimal("0.01"),
    "BNB":  Decimal("0.005"),
    "TRX":  Decimal("5"),
}

TOPUP_AMOUNTS = (1, 5, 10, 25, 50)

# ---- /start ----



SUB_REQUIRED_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
    "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª.\n"
)

def sub_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_INVITE_LINK)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ])

async def _is_subscribed(bot, user_id: int) -> bool:
    chat_ref = CHANNEL_ID if CHANNEL_ID else CHANNEL_USERNAME
    try:
        member = await bot.get_chat_member(chat_id=chat_ref, user_id=user_id)
    except Exception:
        return False

    return member.status in (
        ChatMemberStatus.CREATOR,  # –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞
        ChatMemberStatus.ADMINISTRATOR,  # –∞–¥–º–∏–Ω
        ChatMemberStatus.MEMBER  # –æ–±—ã—á–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫
    )


# === /start ===
@dp.message(Command("start"))
async def start(msg: types.Message):
    add_user(msg.from_user.id)  # —Å–æ–∑–¥–∞—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç
    user = get_user(msg.from_user.id)
    if user and user.get("banned"):
        await msg.reply("‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ ‚õî")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await _is_subscribed(msg.bot, msg.from_user.id):
        await msg.answer(SUB_REQUIRED_TEXT, reply_markup=sub_keyboard(), disable_web_page_preview=True)
        return

    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await msg.reply(
        f"üëã {msg.from_user.first_name} üëã\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è",
        reply_markup=main_menu,
    )


# === –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–æ–π ===
@dp.callback_query(F.data == "check_sub")
async def cb_check_sub(callback: types.CallbackQuery):
    ok = await _is_subscribed(callback.bot, callback.from_user.id)
    if ok:
        with contextlib.suppress(Exception):
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", show_alert=False)
        try:
            await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶",
                                             reply_markup=main_menu)
        except Exception:
            await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é‚Ä¶",
                                          reply_markup=main_menu)
    else:
        await callback.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å ü§î", show_alert=True)



# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ ---
class LinkStates(StatesGroup):
    choosing_plan = State()       # –Ω–æ–≤—ã–π —à–∞–≥: –≤—ã–±–æ—Ä –∫–æ–ª-–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    waiting_for_url = State()

# --- –¢–∞—Ä–∏—Ñ—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ---
from decimal import Decimal

LINK_PLANS: dict[int, Decimal] = {
    1: Decimal("1.0"),
    2: Decimal("1.5"),
    3: Decimal("2.0"),
    5: Decimal("3.0"),
}

def _plan_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="1 –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî 1 USDT",   callback_data="linkplan:1"),
            InlineKeyboardButton(text="2 –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Äî 1.5 USDT", callback_data="linkplan:2"),
        ],
        [
            InlineKeyboardButton(text="3 –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Äî 2 USDT",  callback_data="linkplan:3"),
            InlineKeyboardButton(text="5 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ‚Äî 3 USDT", callback_data="linkplan:5"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

@dp.callback_query(lambda c: c.data == "generate_link")
async def generate_link_callback(callback: types.CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    if user and user.get("banned"):
        await callback.message.answer("‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ ‚õî")
        return

    bal = Decimal(str(get_balance(callback.from_user.id) or 0))
    text = (
        "üîó <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏:\n\n"
        "üëâ 1 –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî 1 USDT\n"
        "üëâ 2 –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Äî 1.5 USDT\n"
        "üëâ 3 –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Äî 2 USDT\n"
        "üëâ 5 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ‚Äî 3 USDT\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {_fmt_dec(bal)} USDT"
    )
    await callback.message.edit_text(text, reply_markup=_plan_keyboard(), parse_mode="HTML")
    await state.clear()
    await state.set_state(LinkStates.choosing_plan)
    await callback.answer()

MAX_URL_LEN = 2048
ALLOWED_SCHEMES = {"http", "https"}

def _extract_url_from_message(msg: types.Message) -> Optional[str]:
    if msg.entities:
        for e in msg.entities:
            if e.type == MessageEntityType.TEXT_LINK:
                return e.url
    if msg.entities:
        for e in msg.entities:
            if e.type == MessageEntityType.URL:
                return msg.text[e.offset : e.offset + e.length]
    txt = (msg.text or "").strip()
    return txt or None

from urllib.parse import urlsplit, urlunsplit

def _validate_and_normalize_url(url: str) -> tuple[bool, Optional[str], Optional[str]]:
    if not url:
        return False, None, (
            "‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.\n"
            "‚úçÔ∏è –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://example.com\n\n"
            "üîÑ –ù–∞–∂–º–∏ —Å–Ω–æ–≤–∞ ¬´üõ† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É¬ª"
        )
    url = url.strip()
    if len(url) > MAX_URL_LEN:
        return False, None, (
            f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (>{MAX_URL_LEN}).\n\n"
            "üîÑ –ù–∞–∂–º–∏ —Å–Ω–æ–≤–∞ ¬´üõ† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É¬ª"
        )

    parts = urlsplit(url)
    if parts.scheme.lower() not in ALLOWED_SCHEMES:
        return False, None, (
            "üö´ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ http/https.\n"
            "–ü—Ä–∏–º–µ—Ä: https://example.com\n\n"
            "üîÑ –ù–∞–∂–º–∏ —Å–Ω–æ–≤–∞ ¬´üõ† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É¬ª"
        )
    if not parts.netloc:
        return False, None, (
            "üåê –£ —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω.\n"
            "–ü—Ä–∏–º–µ—Ä: https://example.com\n\n"
            "üîÑ –ù–∞–∂–º–∏ —Å–Ω–æ–≤–∞ ¬´üõ† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É¬ª"
        )

    normalized = urlunsplit(
        (parts.scheme.lower(), parts.netloc.lower(), parts.path or "", parts.query or "", "")
    )
    return True, normalized, None

# ---- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ----

ALPHABET62 = string.ascii_letters + string.digits

def _encode_base62(n: int) -> str:
    if n == 0:
        return ALPHABET62[0]
    s, base = [], len(ALPHABET62)
    while n:
        n, r = divmod(n, base)
        s.append(ALPHABET62[r])
    return "".join(reversed(s))

def _make_realistic_slug(link_id: int, noise_len: int = 8) -> str:
    core = _encode_base62(link_id)
    noise = "".join(secrets.choice(ALPHABET62) for _ in range(noise_len))
    return core + noise

import re, secrets, string
from urllib.parse import urlsplit

DOMAIN = "vrf.lat"  # —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω

def _make_short_host(original_url: str, noise_len: int = 6) -> str:
    netloc = urlsplit(original_url).netloc.lower()

    # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
    label = netloc.replace(".", "-")
    label = re.sub(r"[^a-z0-9-]", "-", label)
    label = re.sub(r"-+", "-", label).strip("-")

    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 63 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ DNS-–º–µ—Ç–∫—É ‚Äî —Ä–µ–∂–µ–º –æ—Å–Ω–æ–≤—É
    base_max = 63 - 1 - noise_len  # –¥–µ—Ñ–∏—Å + —à—É–º
    base = label[:max(1, base_max)]

    noise = "".join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(noise_len))
    one_level_label = f"{base}-{noise}".strip("-")[:63]

    return f"{one_level_label}.{DOMAIN}"

def _save_link_with_slug(
    original_url: str,
    user_id: int,
    max_clicks: int = 1,
    short_host: str | None = None,
) -> Optional[str]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É; –µ—Å–ª–∏ short_host –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç slug –∏–ª–∏ None.
    """
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        if not cur.fetchone():
            return None

        # —Å–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ slug/short_host
        cur.execute(
            "INSERT INTO links (user_id, original_url, max_clicks, link, short_host) VALUES (?, ?, ?, ?, ?)",
            (user_id, original_url, max_clicks, "", ""),
        )
        link_id = cur.lastrowid

        for _ in range(10):
            slug = _make_realistic_slug(link_id, noise_len=random.randint(8, 15))
            host = short_host or _make_short_host(original_url, noise_len=random.randint(5, 8))
            try:
                cur.execute(
                    "UPDATE links SET link = ?, short_host = ? WHERE id = ?",
                    (slug, host, link_id),
                )
                conn.commit()
                return slug
            except sqlite3.IntegrityError:
                # –∫–æ–ª–ª–∏–∑–∏—è slug –∏–ª–∏ short_host ‚Äî –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
                continue

        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
        cur.execute("DELETE FROM links WHERE id = ?", (link_id,))
        conn.commit()
        return None
    except Exception:
        conn.rollback()
        return None
    finally:
        cur.close()
        conn.close()

import re
from urllib.parse import urlsplit

_dns_allowed = re.compile(r"[a-z0-9-]")

def _safe_label(s: str, *, max_len: int = 30) -> str:
    """
    –î–µ–ª–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª—è DNS-–ª–µ–π–±–ª–∞:
    - –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    - –∑–∞–º–µ–Ω—è–µ–º –≤—Å—ë –Ω–µ [a-z0-9-] –Ω–∞ '-'
    - —Å–∂–∏–º–∞–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ '-' –¥–æ –æ–¥–Ω–æ–≥–æ
    - –æ–±—Ä–µ–∑–∞–µ–º –¥–æ max_len
    - —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ/–∫–æ–Ω–µ—á–Ω—ã–µ '-'
    - –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî 'x'
    """
    s = (s or "").lower()
    s = "".join(ch if _dns_allowed.match(ch) else "-" for ch in s)
    s = re.sub(r"-{2,}", "-", s).strip("-")
    if not s:
        s = "x"
    if len(s) > max_len:
        s = s[:max_len].rstrip("-") or "x"
    return s

_ALNUM = string.ascii_lowercase + string.digits

def _noise_label(groups: int = 3, group_len: int = 3) -> str:
    """
    –î–µ–ª–∞–µ—Ç –ª–µ–π–±–ª –≤–∏–¥–∞ 'a1f-b9k-2xq' (—Ç–æ–ª—å–∫–æ [a-z0-9-]),
    —á—Ç–æ–±—ã –æ–Ω –≤—ã–≥–ª—è–¥–µ–ª –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø—Ä–æ—Ö–æ–¥–∏–ª DNS.
    """
    parts = [
        "".join(secrets.choice(_ALNUM) for _ in range(group_len))
        for _ in range(groups)
    ]
    return "-".join(parts)

def _build_host_from_url(url: str, base_domain: str = DOMAIN) -> str:
    parts = urlsplit(url)

    host_labels = [_safe_label(x, max_len=32) for x in parts.netloc.split(".") if x]

    path_segments = [seg for seg in parts.path.split("/") if seg]
    extra_labels = []
    if path_segments:
        extra_labels.append(_safe_label(path_segments[0], max_len=32))
    if len(path_segments) > 1:
        extra_labels.append(_safe_label(path_segments[1], max_len=48))

    # üëá –Ω–æ–≤—ã–π ¬´—à—É–º–æ–≤–æ–π¬ª –ª–µ–π–±–ª —Å –¥–µ—Ñ–∏—Å–∞–º–∏
    noise = _noise_label(groups=3, group_len=3)  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 'v4m-k1a-9qz'

    labels = host_labels + extra_labels + [noise, base_domain]
    host = ".".join(labels)

    if len(host) > 253:
        # —É—Ä–µ–∑–∞–µ–º extra_labels, –∑–∞—Ç–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ä–µ–∑–∞–µ–º –ª–µ–π–±–ª—ã
        while len(host) > 253 and extra_labels:
            extra_labels.pop()
            labels = host_labels + extra_labels + [noise, base_domain]
            host = ".".join(labels)
        if len(host) > 253:
            trimmed = []
            for lb in labels:
                if len(host) <= 253:
                    trimmed.append(lb); continue
                if lb in (base_domain, noise):
                    trimmed.append(lb); continue
                cut = lb[:max(1, len(lb) - (len(host) - 253))]
                cut = cut.rstrip("-") or "x"
                trimmed.append(cut)
                host = ".".join(trimmed + labels[len(trimmed):])
            host = ".".join(trimmed)

    return host

@dp.callback_query(lambda c: c.data.startswith("linkplan:"))
async def choose_link_plan(callback: types.CallbackQuery, state: FSMContext):
    try:
        max_clicks = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∞.")
        await callback.answer()
        return

    if max_clicks not in LINK_PLANS:
        await callback.message.answer("‚ùå –¢–∞–∫–æ–π –ø–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await callback.answer()
        return

    cost = LINK_PLANS[max_clicks]
    bal = Decimal(str(get_balance(callback.from_user.id) or 0))

    if bal < cost:
        need = (cost - bal).quantize(Decimal("0.01"))
        await callback.message.edit_text(
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏.\n\n"
            f"üìå –ü–ª–∞–Ω: {max_clicks} –ø–µ—Ä–µ—Ö–æ–¥(–∞/–æ–≤) ‚Äî {_fmt_dec(cost)} USDT\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: {_fmt_dec(bal)} USDT\n"
            f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {_fmt_dec(need)} USDT\n\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=topup_or_back_kb(),
        )
        await callback.answer()
        return

    # –±–∞–ª–∞–Ω—Å —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫—É –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    await state.update_data(max_clicks=max_clicks, cost=str(cost))
    await state.set_state(LinkStates.waiting_for_url)

    await callback.message.edit_text(
        f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.\n\n"
        f"üìå –ü–ª–∞–Ω: {max_clicks} –ø–µ—Ä–µ—Ö–æ–¥(–∞/–æ–≤)\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {_fmt_dec(cost)} USDT (–±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://example.com/page?x=1",
        parse_mode="HTML"
    )
    await callback.answer()


@dp.message(LinkStates.waiting_for_url)
async def handle_url(msg: types.Message, state: FSMContext):
    # 1) –¥–æ—Å—Ç–∞—ë–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    data = await state.get_data()
    try:
        max_clicks = int(data.get("max_clicks"))
        cost = Decimal(str(data.get("cost")))
    except Exception:
        await msg.reply("‚ö†Ô∏è –°–µ—Å—Å–∏—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞–∂–º–∏ ¬´üõ† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É¬ª –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    # 2) –≤–∞–ª–∏–¥–∏—Ä—É–µ–º URL
    candidate = _extract_url_from_message(msg)
    ok, original_url, err = _validate_and_normalize_url(candidate)
    if not ok:
        await msg.reply(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{err}")
        return

    # 3) –≥–µ–Ω–µ—Ä–∏–º –ø–æ–¥–¥–æ–º–µ–Ω (—Å —à—É–º–æ–º) –û–î–ò–ù –†–ê–ó –∏ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –ë–î
    # —Ñ—É–Ω–∫—Ü–∏—è _build_host_from_url –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å —à—É–º —Å –¥–µ—Ñ–∏—Å–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # www.youtube.com.watch-abc-12d-9kq.vrf.lat
    try:
        short_host = _build_host_from_url(original_url, DOMAIN)
    except Exception as e:
        await msg.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–æ—Å—Ç: {e}")
        await state.clear()
        return

    # 4) —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ (Decimal)
    ok_spend, new_balance, _ = minus_balance(msg.from_user.id, cost)
    if not ok_spend:
        bal_txt = _fmt_dec(Decimal(str(new_balance))) if new_balance is not None else "0"
        need = (cost - Decimal(str(new_balance or 0))).quantize(Decimal("0.01")) if new_balance is not None else cost
        await msg.reply(
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏..\n\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: {bal_txt} USDT\n"
            f"üí∏ –ù—É–∂–Ω–æ: {_fmt_dec(cost)} USDT (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {_fmt_dec(need)})",
            reply_markup=topup_or_back_kb()
        )
        await state.clear()
        return

    # 5) —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å–æ —Å–≤–æ–∏–º max_clicks –∏ –°–û–•–†–ê–ù–Ø–ï–ú short_host –≤ –ë–î
    db_user = get_user(msg.from_user.id)  # –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å "id" (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π users.id)
    if not db_user or "id" not in db_user:
        # –æ—Ç–∫–∞—Ç —Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º—ã
        add_balance(msg.from_user.id, float(cost))
        await msg.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –í–ê–ñ–ù–û: _save_link_with_slug –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å short_host –≤ –∫–æ–ª–æ–Ω–∫—É links.short_host
    # (ALTER TABLE links ADD COLUMN short_host TEXT; ‚Äî –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞)
    slug = _save_link_with_slug(
        original_url=original_url,
        user_id=db_user["id"],
        max_clicks=max_clicks,
        short_host=short_host,          # üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    )
    if not slug:
        # –æ—Ç–∫–∞—Ç —Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        add_balance(msg.from_user.id, float(cost))
        await msg.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    # 6) –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    short_link = f"{PREFERRED_SCHEME}://{short_host}/link/{slug}"
    left = (new_balance or Decimal("0")).quantize(Decimal("0.01"))
    await msg.reply(
        f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n"
        f"üîó <code>{short_link}</code> üîó\n"
        f"üëÄ –õ–∏–º–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: <b>{max_clicks}</b>\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω–æ: <b>{_fmt_dec(cost)} USDT</b>\n"
        f"üíº –ë–∞–ª–∞–Ω—Å: {left} USDT",
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await state.clear()



# ---- –ú–æ–∏ —Å—Å—ã–ª–∫–∏ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è ----

LINKS_PER_PAGE = 5

def paginate_links(links: list[dict], page: int) -> list[dict]:
    start = page * LINKS_PER_PAGE
    return links[start : start + LINKS_PER_PAGE]

def build_links_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    row = []
    if page > 0:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_links:{page-1}"))
    if page < total_pages - 1:
        row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"my_links:{page+1}"))
    row.append(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu"))
    return InlineKeyboardMarkup(inline_keyboard=[row])

@dp.callback_query(lambda c: c.data.startswith("my_links"))
async def my_links_callback(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        return
    if user.get("banned"):
        await callback.message.answer("‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ ‚õî")
        return

    # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        page = int(callback.data.split(":", 1)[1]) if ":" in callback.data else 0
    except Exception:
        page = 0
    if page < 0:
        page = 0

    links = get_links(user["telegram_id"])  # –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª—è–º–∏: original_url, link (slug), short_host, clicks, max_clicks, created_at
    if not links:
        await callback.message.edit_text("‚Äî –°—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî", reply_markup=back_to_menu)
        return

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = max((len(links) + LINKS_PER_PAGE - 1) // LINKS_PER_PAGE, 1)
    if page >= total_pages:
        page = total_pages - 1

    start = page * LINKS_PER_PAGE
    end = start + LINKS_PER_PAGE
    page_links = links[start:end]

    # —Å–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    lines = [f"üîó –¢–≤–æ–∏ —Å—Å—ã–ª–∫–∏ (—Å—Ç—Ä. {page + 1}/{total_pages}):", ""]
    for l in page_links:
        clicks = int(l.get("clicks", 0) or 0)

        # max_clicks –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ int/str/None/Decimal ‚Äî –ø—Ä–∏–≤–µ–¥—ë–º –∫ int —Å –∑–∞–ø–∞—Å–æ–º
        raw_mc = l.get("max_clicks", 1)
        try:
            max_clicks = int(raw_mc) if raw_mc is not None else 1
        except (TypeError, ValueError):
            max_clicks = 1
        if max_clicks < 1:
            max_clicks = 1

        # —Å—Ç–∞—Ç—É—Å –ø–æ –ª–∏–º–∏—Ç—É
        status = "üü¢" if clicks < max_clicks else "üî¥"

        # –∫–æ—Ä–æ—Ç–∫–∏–π –ª–∏–Ω–∫ ‚Äî —á–µ—Ä–µ–∑ short_host, fallback –Ω–∞ SERVER_URL
        slug = l.get("link", "") or ""
        short_host = (l.get("short_host") or "").strip()
        short_url = f"https://{short_host}/link/{slug}"

        # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è HTML
        orig = escape(l.get("original_url", "N/A"))
        short_esc = escape(short_url)
        created = escape(str(l.get("created_at", "N/A")))

        lines += [
            f"üåç –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è: {orig}",
            f"‚û°Ô∏è –ö–æ—Ä–æ—Ç–∫–∞—è: <code>{short_esc}</code>",
            f"üëÄ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {clicks}/{max_clicks} {status}",
            f"üïí –°–æ–∑–¥–∞–Ω–∞: {created} UTC",
            ""
        ]

    text = "\n".join(lines)

    await callback.message.edit_text(
        text,
        reply_markup=build_links_keyboard(page, total_pages),
        parse_mode="HTML",
        disable_web_page_preview=True
    )


# ---- –ù–∞–≤–∏–≥–∞—Ü–∏—è ----

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        f"üëã {callback.from_user.first_name} üëã\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=main_menu
    )
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("user_panel"))
async def user_panel_callback(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    if user and user.get("banned"):
        await callback.message.answer("‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ ‚õî")
        return

    bal = Decimal(str(user.get("balance", 0)))
    await callback.message.edit_text(
        "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"üÜî Telegram ID: {callback.from_user.id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {_fmt_dec(bal)} USDT\n"
        f"üïò –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', 'N/A')} UTC\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
        reply_markup=user_panel_kb,
    )

# ---- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot ----

class TopUpStates(StatesGroup):
    waiting_amount = State()

@dp.callback_query(lambda c: c.data == "topup")
async def topup_start(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_method_kb)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "paymethod:back")
async def paymethod_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_method_kb)
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data == "paymethod:cryptobot")
async def paymethod_cryptobot(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=crypto_assets_kb())
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("asset:"))
async def asset_chosen(callback: types.CallbackQuery):
    asset = callback.data.split(":", 1)[1]
    if asset not in SUPPORTED_ASSETS:
        await callback.message.edit_text("‚ùå –≠—Ç–∞ –º–æ–Ω–µ—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", reply_markup=payment_method_kb)
        await callback.answer()
        return

    min_amt = MIN_AMOUNT.get(asset, Decimal("0"))
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è <b>{asset}</b>:\n"
        f"üîπ –ú–∏–Ω–∏–º—É–º: <b>{_fmt_dec(min_amt)} {asset}</b>",
        reply_markup=amounts_kb(asset),
        parse_mode="HTML",
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("amount:"))
async def amount_fixed(callback: types.CallbackQuery):
    _, asset, val = callback.data.split(":")
    try:
        amount = Decimal(val)
        if amount <= 0:
            raise ValueError
    except Exception:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    min_amt = MIN_AMOUNT.get(asset, Decimal("0"))
    if amount < min_amt:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è <b>{asset}</b>.\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <b>{_fmt_dec(min_amt)} {asset}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
            reply_markup=amounts_kb(asset),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    try:
        invoice_id, pay_url = await create_topup_invoice(
            user_id=callback.from_user.id, amount=float(amount), asset=asset
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {e}")
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkinv:{invoice_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="paymethod:cryptobot")],
        ]
    )
    await callback.message.edit_text(
        f"üßæ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω: <b>{_fmt_dec(amount)} {asset}</b>\n"
        f"ID: <code>{invoice_id}</code>\n"
        f"–û—Ç–∫—Ä–æ–π—Ç–µ –æ–ø–ª–∞—Ç—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=kb,
        parse_mode="HTML",
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("amount_custom:"))
async def amount_custom(callback: types.CallbackQuery, state: FSMContext):
    asset = callback.data.split(":", 1)[1]
    await state.update_data(asset=asset)
    await state.set_state(TopUpStates.waiting_amount)

    min_amt = MIN_AMOUNT.get(asset, Decimal("0"))
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="paymethod:cryptobot")]])
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ <b>{asset}</b> (–º–∏–Ω–∏–º—É–º <b>{_fmt_dec(min_amt)} {asset}</b>):",
        reply_markup=kb,
        parse_mode="HTML",
    )
    await callback.answer()

@dp.message(TopUpStates.waiting_amount)
async def amount_entered(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    asset = data.get("asset", "USDT")
    raw = (msg.text or "").strip().replace(",", ".")

    try:
        amount = Decimal(raw)
        if amount <= 0:
            raise ValueError
    except Exception:
        await msg.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12 –∏–ª–∏ 12.34).")
        return

    min_amt = MIN_AMOUNT.get(asset, Decimal("0"))
    if amount < min_amt:
        await msg.reply(
            f"‚ö†Ô∏è –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è <b>{asset}</b>.\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <b>{_fmt_dec(min_amt)} {asset}</b>\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML",
        )
        return

    try:
        invoice_id, pay_url = await create_topup_invoice(
            user_id=msg.from_user.id, amount=float(amount), asset=asset
        )
    except Exception as e:
        await msg.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {e}")
        return
    finally:
        await state.clear()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checkinv:{invoice_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="paymethod:cryptobot")],
        ]
    )
    await msg.answer(
        f"üßæ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω: <b>{_fmt_dec(amount)} {asset}</b>\n"
        f"ID: <code>{invoice_id}</code>\n"
        f"–û—Ç–∫—Ä–æ–π—Ç–µ –æ–ø–ª–∞—Ç—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=kb,
        parse_mode="HTML",
    )

@dp.callback_query(lambda c: c.data.startswith("checkinv:"))
async def topup_check(callback: types.CallbackQuery):
    invoice_id = callback.data.split(":", 1)[1]

    try:
        status = await check_and_credit(invoice_id)   # üëà –±–µ–∑ –∫–æ–ª–±—ç–∫–∞
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")
        await callback.answer()
        return

    if status == "paid":
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∞!")
    elif status == "already_paid":
        await callback.message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç —Å—á—ë—Ç —É–∂–µ –±—ã–ª –∑–∞—á–∏—Å–ª—ë–Ω —Ä–∞–Ω–µ–µ.")
    elif status == "active":   # —É CryptoBot —Å—Ç–∞—Ç—É—Å 'active', –Ω–µ 'pending'
        await callback.message.answer("‚è≥ –°—á—ë—Ç –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.")
    elif status == "expired":
        await callback.message.answer("‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á—ë—Ç–∞ –∏—Å—Ç—ë–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
    else:
        await callback.message.answer("‚ö†Ô∏è –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback.answer()

class NowPayStates(StatesGroup):
    waiting_amount_usd = State()

NOWP_MIN_USD = Decimal("10")


@dp.callback_query(lambda c: c.data == "paymethod:NowPayments")
async def paymethod_nowpayments(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(NowPayStates.waiting_amount_usd)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="paymethod:back")]]
    )
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ <b>USD</b>.\n"
        f"üîπ –ú–∏–Ω–∏–º—É–º: <b>{_fmt_dec(NOWP_MIN_USD)} USD</b>\n\n"
        "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —è –¥–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É NOWPayments ‚Äî –º–æ–Ω–µ—Ç—É –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
        reply_markup=kb,
        parse_mode="HTML",
    )
    await callback.answer()


@dp.message(NowPayStates.waiting_amount_usd)
async def nowp_amount_entered(msg: types.Message, state: FSMContext):
    raw = (msg.text or "").strip().replace(",", ".")
    try:
        amount_usd = Decimal(raw)
        if amount_usd <= 0:
            raise ValueError
    except Exception:
        await msg.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12 –∏–ª–∏ 12.34).")
        return

    if amount_usd < NOWP_MIN_USD:
        await msg.reply(
            f"‚ö†Ô∏è –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <b>{_fmt_dec(NOWP_MIN_USD)} USD</b>",
            parse_mode="HTML",
        )
        return

    try:
        order_id = f"NP-{msg.from_user.id}-{int(time.time())}-{secrets.token_hex(3)}"
        inv = await np_create_invoice(
            amount=float(amount_usd),
            price_currency="usd",
            order_id=order_id,
            user_telegram_id=msg.from_user.id,
            success_url = "https://nowpayments.io",
            cancel_url = "https://nowpayments.io",
            ipn_url=f"{SERVER_URL}/nowpayments/ipn",
            order_description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ NOWPayments",
        )
    except Exception as e:
        await msg.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç NOWPayments: {e}")
        return
    finally:
        await state.clear()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û—Ç–∫—Ä—ã—Ç—å –æ–ø–ª–∞—Ç—É (NOWPayments)", url=inv.invoice_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"np_check:{order_id}")],
        ]
    )
    await msg.answer(
        f"üßæ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω: <b>{_fmt_dec(amount_usd)} USD</b>\n"
        f"ID: <code>{inv.id}</code>\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –º–æ–Ω–µ—Ç—É. –ë–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
        reply_markup=kb,
        parse_mode="HTML",
        disable_web_page_preview=False,
    )




@dp.callback_query(lambda c: c.data.startswith("np_check:"))
async def nowp_check_status(callback: types.CallbackQuery):
    order_id = callback.data.split(":", 1)[1]

    inv = get_nowp_invoice(order_id)
    if not inv:
        await callback.message.answer("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    # payload (—Å–æ–¥–µ—Ä–∂–∏—Ç iid, invoice_url, –≤–æ–∑–º–æ–∂–Ω–æ payment_id)
    try:
        payload = json.loads(inv.get("payload") or "{}")
    except Exception:
        payload = {}

    payment_id = payload.get("payment_id")
    iid = payload.get("iid") or payload.get("invoice_id")
    invoice_url = payload.get("invoice_url")
    tg_id = payload.get("tg")

    # 1) –µ—Å–ª–∏ payment_id –µ—â—ë –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ —á–µ—Ä–µ–∑ /payment?invoiceId=...
    if not payment_id and iid:
        try:
            resp = await np_list_by_iid(iid=str(iid), limit=5)
            items = resp.get("data") or []
            if items:
                candidate = next(
                    (p for p in items if (p.get("payment_status") or "").lower() not in {"failed", "expired"}),
                    items[0]
                )
                payment_id = str(candidate.get("payment_id"))
                update_nowp_payment_details(
                    order_id=order_id,
                    payment_id=payment_id,
                    pay_currency=(candidate.get("pay_currency") or "").upper() or None,
                    pay_amount=float(candidate.get("pay_amount") or 0) if candidate.get("pay_amount") else None,
                    extra={
                        "invoice_id": candidate.get("invoice_id"),
                        "purchase_id": candidate.get("purchase_id"),
                        "actually_paid": candidate.get("actually_paid"),
                        "outcome_currency": candidate.get("outcome_currency"),
                        "outcome_amount": candidate.get("outcome_amount"),
                    }
                )
        except Exception as e:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç—ë–∂ –ø–æ –∏–Ω–≤–æ–π—Å—É: {e}")
            await callback.answer()
            return

    # –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç payment_id ‚Üí –∑–Ω–∞—á–∏—Ç —á–µ–ª–æ–≤–µ–∫ –¥–∞–∂–µ –Ω–µ –Ω–∞—á–∞–ª –æ–ø–ª–∞—Ç—É
    if not payment_id:
        msg = [
            "‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ NOWPayments.",
            "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´Pay¬ª.",
        ]
        if invoice_url:
            msg.append(f"\nüîó –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã: {invoice_url}")
        await callback.message.answer("\n".join(msg))
        await callback.answer()
        return

    # 2) –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ payment_id
    try:
        info = await np_get_status(str(payment_id))
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer()
        return

    status = (info.get("payment_status") or "").lower()
    pay_currency = (info.get("pay_currency") or "").upper()
    pay_amount = Decimal(str(info.get("pay_amount") or 0))

    # 3) —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã ‚Üí –ø—Ä–æ–±—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –∑–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å
    if status in {"finished", "confirmed", "sending"}:
        if mark_nowp_paid(order_id):
            if tg_id:
                try:
                    rate = await get_rate_usdt(pay_currency)
                    credits = (pay_amount * rate).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
                    add_balance(int(tg_id), credits)
                    await callback.message.answer(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∞!\n"
                        f"–ó–∞—á–∏—Å–ª–µ–Ω–æ: {credits} USDT (—ç–∫–≤.)\n"
                        f"–ú–æ–Ω–µ—Ç–∞: {pay_currency}, —Å—É–º–º–∞: {pay_amount}"
                    )
                except Exception as e:
                    await callback.message.answer(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}"
                    )
            else:
                await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        else:
            await callback.message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç —Å—á—ë—Ç —É–∂–µ –±—ã–ª –∑–∞—á–∏—Å–ª—ë–Ω —Ä–∞–Ω–µ–µ.")

    elif status == "waiting":
        await callback.message.answer("üïí –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ NOWPayments.")
    elif status == "confirming":
        await callback.message.answer("‚õì –ò–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –û–∂–∏–¥–∞–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é‚Ä¶")
    elif status == "partially_paid":
        await callback.message.answer("‚ö†Ô∏è –û–ø–ª–∞—á–µ–Ω–æ –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ. –î–æ–∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á—ë—Ç.")
    elif status == "failed":
        await callback.message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif status == "expired":
        await callback.message.answer("‚åõ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∏—Å—Ç—ë–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á—ë—Ç.")
    else:
        await callback.message.answer(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}")

    await callback.answer()


PROXYNOVA_COMB_URL = "https://api.proxynova.com/comb"

# –º–∞–∫—Å–∏–º—É–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –ª–∏—Å—Ç–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ API –≤–µ—Ä–Ω—ë—Ç 10 000
COMB_TOTAL_SOFT_MAX = 50

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (ProxyNova –∫–∞–ø—Ä–∏–∑–Ω–∏—á–∞–µ—Ç –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö)
COMB_LIMIT_DEF = 15
COMB_LIMIT_MAX = 25

# ================== FSM =====================

class LeakCheckStates(StatesGroup):
    waiting_for_query = State()

# ================== –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ =========

_email_re = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")
_username_re = re.compile(r"^[A-Za-z0-9._-]{3,64}$")

def is_email(s: str) -> bool:
    return bool(_email_re.match(s or ""))

def is_username(s: str) -> bool:
    return bool(_username_re.match(s or ""))

# ================== –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===

def mask_password(p: str) -> str:
    """
    –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 1‚Äì2 —Å–∏–º–≤–æ–ª–∞ –∏ –¥–ª–∏–Ω—É, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∑–≤—ë–∑–¥–æ—á–∫–∏.
    """
    if not p:
        return ""
    if len(p) == 1:
        return p[0] + "*"
    if len(p) == 2:
        return p[0] + "*"
    return p[:2] + "*" * (len(p) - 2)

def split_line(line: str) -> Tuple[str, str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ 'email:password' –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–≤–æ–µ—Ç–æ—á–∏—é.
    """
    if ":" in line:
        email, pwd = line.split(":", 1)
    else:
        email, pwd = line, ""
    return email.strip(), pwd.strip()

def _clamp(n: int, lo: int, hi: int) -> int:
    return max(lo, min(hi, n))

def back_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚§¥Ô∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
    )

# ================== –†–∞–±–æ—Ç–∞ —Å ProxyNova comb ==

async def fetch_comb(query: str, start: int = 0, limit: int = COMB_LIMIT_DEF) -> dict:
    """
    –í—ã–∑–æ–≤ –ø—É–±–ª–∏—á–Ω–æ–≥–æ comb API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {"count": int, "lines": [ "email:pass", ... ]}
    """
    params = {"query": query, "start": str(start), "limit": str(limit)}
    timeout = httpx.Timeout(15.0)
    async with httpx.AsyncClient(timeout=timeout) as client:
        r = await client.get(PROXYNOVA_COMB_URL, params=params)
        r.raise_for_status()
        data = r.json()
        if not isinstance(data, dict) or "count" not in data or "lines" not in data:
            raise RuntimeError("unexpected comb api response structure")
        return data

async def safe_fetch_comb(query: str, start: int, limit: int) -> dict:
    """
    –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ comb:
    - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º limit –¥–æ COMB_LIMIT_MAX
    - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º start
    - –ø—Ä–∏ 400 –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    """
    limit = _clamp(int(limit or COMB_LIMIT_DEF), 1, COMB_LIMIT_MAX)
    start = max(0, int(start or 0))
    try:
        return await fetch_comb(query=query, start=start, limit=limit)
    except Exception as e:
        msg = str(e)
        if "400 Bad Request" in msg and start > 0:
            try:
                head = await fetch_comb(query=query, start=0, limit=1)
                total = int(head.get("count", 0))
                if total > 0:
                    last_start = max(0, total - limit)
                    if last_start != start:
                        return await fetch_comb(query=query, start=last_start, limit=limit)
            except Exception:
                pass
        raise

# ================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==============

def comb_pager_kb(*, query: str, start: int, limit: int, total: int, reveal: bool) -> InlineKeyboardMarkup:
    # total —Ç—É—Ç —É–∂–µ <= COMB_TOTAL_SOFT_MAX
    prev_start = max(0, start - limit)
    next_start = start + limit

    rows: list[list[InlineKeyboardButton]] = []

    nav_row: list[InlineKeyboardButton] = []
    if start > 0:
        nav_row.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"comb:page:{query}:{prev_start}:{limit}:{int(reveal)}"
            )
        )
    if next_start < total:
        nav_row.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=f"comb:page:{query}:{next_start}:{limit}:{int(reveal)}"
            )
        )
    if nav_row:
        rows.append(nav_row)

    rows.append([
        InlineKeyboardButton(
            text=("üôà –°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª–∏" if reveal else "üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª–∏"),
            callback_data=f"comb:reveal:{query}:{start}:{limit}:{int(not reveal)}"
        )
    ])
    rows.append([InlineKeyboardButton(text="‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_this")])
    rows.append([InlineKeyboardButton(text="‚§¥Ô∏è –í –º–µ–Ω—é", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã =========

def _format_comb_lines(lines: list[str], reveal: bool) -> str:
    out = []
    for raw in lines:
        email, pwd = split_line(raw)
        pwd_view = pwd if reveal else mask_password(pwd)
        out.append(f"üìß <code>{email}</code>\nüîë <code>{pwd_view}</code>")
    return "\n\n".join(out)

async def render_comb_page(
    *,
    query: str,
    start: int = 0,
    limit: int = COMB_LIMIT_DEF,
    reveal: bool = False,
) -> tuple[str, InlineKeyboardMarkup]:
    # –∂—ë—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º limit –∏ start –µ—â—ë –¥–æ –∑–∞–ø—Ä–æ—Å–∞
    limit = _clamp(int(limit or COMB_LIMIT_DEF), 1, COMB_LIMIT_MAX)
    start = max(0, int(start or 0))

    # —Ç—è–Ω–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
    data = await safe_fetch_comb(query=query, start=start, limit=limit)

    api_total = int(data.get("count", 0))
    lines     = data.get("lines") or []

    # ¬´–º—è–≥–∫–∏–π¬ª –ª–∏–º–∏—Ç –Ω–∞ –æ–±—â–µ–µ —á–∏—Å–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total = min(api_total, COMB_TOTAL_SOFT_MAX)
    if total == 0:
        return "‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", back_menu_kb()

    # –Ω–µ –¥–∞—ë–º —É–π—Ç–∏ –∑–∞ —Ä–∞–º–∫–∏ 50
    if start >= total:
        start = max(0, total - limit)
        # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –¥–æ—Ç—è–Ω–µ–º –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ–∫–∏
        if start < api_total:
            data  = await safe_fetch_comb(query=query, start=start, limit=limit)
            lines = data.get("lines") or []

    shown_to = min(start + limit, total)

    header = f"üìä –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: <b>{total}</b>\n–ü–æ–∫–∞–∑–∞–Ω–æ: {start+1}‚Äì{shown_to}"
    body   = _format_comb_lines(lines, reveal=reveal)
    kb     = comb_pager_kb(query=query, start=start, limit=limit, total=total, reveal=reveal)

    return header + "\n\n" + body, kb

# ================== –•–µ–Ω–¥–ª–µ—Ä—ã =================

# –°—Ç–∞—Ä—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
@dp.callback_query(F.data == "check_email_leak")
async def on_check_leak_click(callback: types.CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    if user and user.get("banned"):
        await callback.message.answer("‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ ‚õî")
        return

    cost = Decimal("0.5")  # —Å—Ä–∞–∑—É –∑–∞–¥–∞—ë–º Decimal
    bal = Decimal(str(get_balance(callback.from_user.id) or 0))

    if bal < cost:
        need = (cost - bal).quantize(Decimal("0.01"))
        await callback.message.edit_text(
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏.\n\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: {_fmt_dec(bal)} USDT\n"
            f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {_fmt_dec(need)} USDT\n\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=topup_or_back_kb(),
        )
        await callback.answer()
        return
    await state.set_state(LeakCheckStates.waiting_for_query)
    await callback.message.edit_text(
        "üîé –í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —É—Ç–µ—á–∫–∞—Ö.\n\n"
        "‚úâÔ∏è –ü—Ä–∏–º–µ—Ä email: <code>name@example.com</code>\n"
        "üë§ –ü—Ä–∏–º–µ—Ä –Ω–∏–∫–∞: <code>john_doe</code>\n\n"
        "‚ö†Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ 0.50 USDT ‚ö†Ô∏è",
        parse_mode="HTML",
        reply_markup=back_menu_kb(),
    )
    await callback.answer()

# –ü—Ä–∏—ë–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
@dp.message(LeakCheckStates.waiting_for_query, F.text)
async def on_leak_query(msg: types.Message, state: FSMContext):
    raw = (msg.text or "").strip()

    if not (is_email(raw) or is_username(raw)):
        await msg.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ email (<code>user@mail.com</code>) –∏–ª–∏ –Ω–∏–∫ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã/._- , 3‚Äì64 —Å–∏–º–≤–æ–ª–∞).",
            parse_mode="HTML"
        )
        return

    # –ï—Å–ª–∏ email ‚Üí –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–æ "@"
    query = raw.split("@", 1)[0] if (is_email(raw) and "@" in raw) else raw

    await state.clear()
    await msg.reply("‚è≥ –ò—â—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è‚Ä¶")
    cost = Decimal("0.5")  # —Å—Ä–∞–∑—É –∑–∞–¥–∞—ë–º Decimal
    try:
        text, kb = await render_comb_page(query=query, start=0, limit=COMB_LIMIT_DEF, reveal=False)
        # 3) —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        ok_spend, new_balance, _ = minus_balance(msg.from_user.id, cost)
        if not ok_spend:
            bal_txt = _fmt_dec(Decimal(str(new_balance))) if isinstance(new_balance, (int, float)) else "0"
            need = (cost - Decimal(str(new_balance or 0))).quantize(
                Decimal("0.01")) if new_balance is not None else cost
            await msg.reply(
                "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞.\n\n"
                f"ü™ô –ë–∞–ª–∞–Ω—Å: {bal_txt} USDT\n"
                f"üí∏ –ù—É–∂–Ω–æ: {_fmt_dec(cost)} USDT (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {_fmt_dec(need)})",
                reply_markup=topup_or_back_kb()
            )
            await state.clear()
            return
        await msg.reply(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    except Exception as e:
        await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
@dp.callback_query(F.data.startswith("comb:page:"))
async def on_comb_page(callback: types.CallbackQuery):
    try:
        _, _, query, start, limit, reveal = callback.data.split(":", 5)
        start  = max(0, int(start))
        limit  = _clamp(int(limit), 1, COMB_LIMIT_MAX)
        reveal = bool(int(reveal))
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)
        return

    # ¬´–º—è–≥–∫–∏–π¬ª —Å—Ç–æ–ø: –Ω–µ –ª–∏—Å—Ç–∞–µ–º –¥–∞–ª—å—à–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if start >= COMB_TOTAL_SOFT_MAX:
        start = max(0, COMB_TOTAL_SOFT_MAX - limit)

    try:
        text, kb = await render_comb_page(query=query, start=start, limit=limit, reveal=reveal)
        await callback.message.edit_text(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    except Exception as e:
        await callback.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("comb:reveal:"))
async def on_comb_toggle_reveal(callback: types.CallbackQuery):
    try:
        _, _, query, start, limit, reveal_next = callback.data.split(":", 5)
        start       = max(0, int(start))
        limit       = _clamp(int(limit), 1, COMB_LIMIT_MAX)
        reveal_next = bool(int(reveal_next))
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)
        return

    if start >= COMB_TOTAL_SOFT_MAX:
        start = max(0, COMB_TOTAL_SOFT_MAX - limit)

    try:
        text, kb = await render_comb_page(query=query, start=start, limit=limit, reveal=reveal_next)
        await callback.message.edit_text(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    except Exception as e:
        await callback.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    finally:
        await callback.answer()

# –ó–∞–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.callback_query(F.data == "close_this")
async def close_this(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    finally:
        await callback.answer()


CAMXPLOIT_PATH = "CamXploit/CamXploit.py"  # —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
SCAN_TIMEOUT = 300  # —Å–µ–∫, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —É–±–∏–≤–∞–µ–º —Å–∫–∞–Ω
USER_JOBS: dict[int, str] = {}  # telegram_id -> job_id (–ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á)

class CamStates(StatesGroup):
    waiting_ip = State()

def _is_valid_ip(ip: str) -> bool:
    try:
        ipaddress.ip_address(ip.strip())
        return True
    except Exception:
        return False

@dp.callback_query(F.data == "scan_cam")
async def on_scan_cam_click(callback: types.CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    if user and user.get("banned"):
        await callback.message.answer("‚õî –í–´ –ó–ê–ë–ê–ù–ï–ù–´ ‚õî")
        return

    cost = Decimal("0.5")  # —Å—Ä–∞–∑—É –∑–∞–¥–∞—ë–º Decimal
    bal = Decimal(str(get_balance(callback.from_user.id) or 0))

    if bal < cost:
        need = (cost - bal).quantize(Decimal("0.01"))
        await callback.message.edit_text(
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏.\n\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: {_fmt_dec(bal)} USDT\n"
            f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {_fmt_dec(need)} USDT\n\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=topup_or_back_kb(),
        )
        await callback.answer()
        return
    # –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞: –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if USER_JOBS.get(callback.from_user.id):
        await callback.answer("‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Å–∫–∞–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)
        return


    await state.set_state(CamStates.waiting_ip)
    await callback.message.edit_text(
        "üîé –í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É—è–∑–≤–∏–º—ã–µ –∫–∞–º–µ—Ä—ã.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ 0.5 USDT", reply_markup=back_to_menu

    )
    await callback.answer()

@dp.message(CamStates.waiting_ip, F.text)
async def on_cam_ip(msg: types.Message, state: FSMContext):
    ip = (msg.text or "").strip()
    if not _is_valid_ip(ip):
        await msg.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP. –ü—Ä–∏–º–µ—Ä: `8.8.8.8`", parse_mode="Markdown")
        return

    # –æ—Ç–º–µ—Ç–∏–º ¬´–∏–¥—ë—Ç –∑–∞–¥–∞—á–∞¬ª
    job_id = str(uuid4())
    USER_JOBS[msg.from_user.id] = job_id

    await state.clear()


    cost = Decimal("0.5")
    ok_spend, new_balance, _ = minus_balance(msg.from_user.id, cost)
    if not ok_spend:
        bal_txt = _fmt_dec(Decimal(str(new_balance))) if isinstance(new_balance, (int, float)) else "0"
        need = (cost - Decimal(str(new_balance or 0))).quantize(
            Decimal("0.01")) if new_balance is not None else cost
        await msg.reply(
            "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞.\n\n"
            f"ü™ô –ë–∞–ª–∞–Ω—Å: {bal_txt} USDT\n"
            f"üí∏ –ù—É–∂–Ω–æ: {_fmt_dec(cost)} USDT (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {_fmt_dec(need)})",
            reply_markup=topup_or_back_kb()
        )
        await state.clear()
        return
    note = await msg.reply(
        f"‚è≥ –ó–∞–ø—É—Å—Ç–∏–ª —Å–∫–∞–Ω <code>{escape(ip)}</code>. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç‚Ä¶\n\n"
             f"üí∏ –°–ø–∏—Å–∞–Ω–æ {cost} USDT\n"
             f"ü™ô –ë–∞–ª–∞–Ω—Å: {new_balance} USDT",
        parse_mode="HTML"
    )
    # —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    asyncio.create_task(_run_camxploit_process(
        ip=ip,
        chat_id=msg.chat.id,
        reply_to=note.message_id,
        user_id=msg.from_user.id,
        job_id=job_id,
    ))

async def _run_camxploit_process(*, ip: str, chat_id: int, reply_to: int, user_id: int, job_id: str):
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º CamXploit –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, —Å–æ–±–∏—Ä–∞–µ–º stdout/stderr, –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —à–ª—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    try:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.isfile(CAMXPLOIT_PATH):
            await bot.send_message(chat_id, "‚ö†Ô∏è CamXploit –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É. –£ CamXploit –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è IP ‚Äî –æ–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ.
        # –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–¥–∏–º IP —á–µ—Ä–µ–∑ stdin.
        proc = await asyncio.create_subprocess_exec(
            "python3", CAMXPLOIT_PATH,
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )

        # –û—Ç–ø—Ä–∞–≤–∏–º IP –≤–æ –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã + –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
        try:
            proc.stdin.write((ip + "\n").encode("utf-8"))
            await proc.stdin.drain()
            proc.stdin.close()
        except Exception:
            pass

        try:
            outs, errs = await asyncio.wait_for(proc.communicate(), timeout=SCAN_TIMEOUT)
        except asyncio.TimeoutError:
            with contextlib.suppress(ProcessLookupError):
                proc.kill()
            await bot.send_message(chat_id, "‚åõ –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π IP.")
            return

        stdout = outs.decode("utf-8", errors="replace")
        stderr = errs.decode("utf-8", errors="replace")

        # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –æ–≥—Ä–æ–º–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–∞–π–ª–æ–º
        text_preview = stdout.strip()
        if not text_preview:
            text_preview = stderr.strip()

        if not text_preview:
            await bot.send_message(chat_id, "‚ö†Ô∏è –°–∫–∞–Ω –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø—É—Å—Ç–æ–π –≤—ã–≤–æ–¥).")
            return


        # –±–æ–ª—å—à–æ–π ‚Äî –∫–∞–∫ —Ñ–∞–π–ª
        fname = f"camxploit_{ip.replace('.', '_')}.txt"
        path = f"/tmp/{fname}"
        with open(path, "w", encoding="utf-8") as f:
            f.write(stdout or stderr)
        await bot.send_document(chat_id, types.FSInputFile(path, filename=fname),
                                caption=f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è <code>{ip}</code>",
                                parse_mode="HTML",
                                reply_to_message_id=reply_to)
        try:
            os.remove(path)
        except Exception:
            pass

    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        # —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
        if USER_JOBS.get(user_id) == job_id:
            USER_JOBS.pop(user_id, None)

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    text = (
        "<b>‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞</b>\n\n"

        "üõ† <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</b>\n"
        "–°–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –Ω–µ–æ—Ç–ª–∏—á–∏–º—É—é –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –ª–æ–≥ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∂–µ—Ä—Ç–≤–µ. "
        "–ü–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∞–π–ø–∏ –∏–ª–∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"

        "üîó <b>–ú–æ–∏ —Å—Å—ã–ª–∫–∏</b>\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —É–≤–∏–¥–∏—à—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ "
        "–∏ —Å–º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.\n\n"

        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å</b>\n"
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ CryptoBot - –±–µ–∑ –ª–∏–º–∏—Ç–∞ –∏ NowPayments - –ª–∏–º–∏—Ç –æ—Ç 10 –¥–æ–ª–ª–∞—Ä–æ–≤.\n\n"

        "üì∑ <b>–°–∫–∞–Ω –∫–∞–º–µ—Ä—ã</b>\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º—ã—Ö –∫–∞–º–µ—Ä, –ø—Ä–æ–±—É–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ä–æ–ª—å. "
        "–í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"

        "üïµÔ∏è <b>–ü—Ä–æ–±–∏–≤ –ª–∏—á–Ω–æ—Å—Ç–∏</b>\n"
        "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ—á—Ç–µ, –Ω–∏–∫—É, –§–ò–û –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n "

        "‚úâÔ∏è <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞—Ä–æ–ª–µ–π –ø–æ –ø–æ—á—Ç–µ</b>\n"
        "–ü–æ–∏—Å–∫ —Å–ª–∏—Ç—ã—Ö –ø–∞—Ä–æ–ª–µ–π –ø–æ –ø–æ—á—Ç–µ –∏–ª–∏ –Ω–∏–∫—É –≤ –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö —É—Ç–µ—á–µ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.\n\n "
    )

    await message.answer(
        text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=back_to_menu
    )


# ---- –ó–∞–ø—É—Å–∫ ----

async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="üìå –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é"),
        BotCommand(command="info", description="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"),
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
