from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, callback_data
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery
from cryptography.fernet import Fernet
import json
from datetime import datetime, timedelta
from config import SECRET_KEY, BOT_TOKEN, SERVER_URL
import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db_api import get_links, add_link, add_user

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
cipher = Fernet(SECRET_KEY)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='\U0001F464 –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç \U0001F464', callback_data='user_panel'), InlineKeyboardButton(text='\U0001F517 –ú–æ–∏ —Å—Å—ã–ª–∫–∏ \U0001F517', callback_data='my_links')],
        [InlineKeyboardButton(text=' \U0001F6E0 –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É \U0001F6E0', callback_data='generate_link')]
    ]
)

back_to_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_menu')]
    ]
)

@dp.message(Command("start"))
async def start(msg: types.Message):
    await msg.reply(
        f"\U0001F44B\U0001F44B\U0001F44B {msg.from_user.first_name} \U0001F44B\U0001F44B\U0001F44B \n\n –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è",
        reply_markup=main_menu
    )
    add_user(msg.from_user.id)

# FSM: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
class LinkStates(StatesGroup):
    waiting_for_url = State()

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
@dp.callback_query(lambda c: c.data == "generate_link")
async def generate_link_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–µ–±—è.")
    await state.set_state(LinkStates.waiting_for_url)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    await callback.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ

@dp.message(LinkStates.waiting_for_url)
async def handle_url(msg: types.Message, state: FSMContext):
    original_url = msg.text
    try:
        data = {
            "url": original_url,
            "user_id": msg.from_user.id,
        }
        encrypted_data = cipher.encrypt(json.dumps(data).encode()).decode()
        short_link = f"{SERVER_URL}/link/{encrypted_data}"

        # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await msg.reply(f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ (–¥–æ—Å—Ç—É–ø–µ–Ω 1 –ø–µ—Ä–µ—Ö–æ–¥): {short_link}")

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ —Å—Å—ã–ª–∫–∏
        add_link(original_url, short_link, msg.from_user.id)
    except Exception as e:
        await msg.reply(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()

LINKS_PER_PAGE = 5  # —Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


def paginate_links(links, page: int):
    start = page * LINKS_PER_PAGE
    end = start + LINKS_PER_PAGE
    return links[start:end]


def build_links_keyboard(page: int, total_pages: int):
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_links:{page-1}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"my_links:{page+1}"))
    buttons.append(InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_menu"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


@dp.callback_query(lambda c: c.data.startswith("my_links"))
async def my_links_callback(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    page = int(parts[1]) if len(parts) > 1 else 0

    links = get_links(callback.from_user.id)

    if not links:
        await callback.message.edit_text(
            "-- –ù–µ—Ç —Å—Å—ã–ª–æ–∫ --", reply_markup=back_to_menu
        )
        return

    total_pages = (len(links) + LINKS_PER_PAGE - 1) // LINKS_PER_PAGE
    page_links = paginate_links(links, page)

    text = f"üîó –¢–≤–æ–∏ —Å—Å—ã–ª–∫–∏ (—Å—Ç—Ä. {page+1}/{total_pages}):\n\n"
    for l in page_links:
        text += (
            f"üåç –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è: {l['original_url']}\n"
            f"‚û°Ô∏è –ö–æ—Ä–æ—Ç–∫–∞—è: {l['link']}\n"
            f"üëÄ –ö–ª–∏–∫–∏: {l['clicks']}\n"
            f"üïí –°–æ–∑–¥–∞–Ω–∞: {l['created_at']}\n\n"
        )

    await callback.message.edit_text(text, reply_markup=build_links_keyboard(page, total_pages))

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f"\U0001F44B\U0001F44B\U0001F44B {callback.from_user.first_name} \U0001F44B\U0001F44B\U0001F44B \n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è",
        reply_markup=main_menu
    )
    await callback.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏


async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é"),
    ]
    await bot.set_my_commands(commands)
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())