import asyncio
from urllib.parse import urlsplit, urlparse
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from config import SERVER_URL, PREFERRED_SCHEME
from database.db_api import get_all_users, ban_user, unban_user, minus_balance, add_balance, \
    get_links, change_count_clicks  # <-- —Ç—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—à—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é
from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from database.db_api import get_user   # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è
from .admin_keyboards import admin_kb, admin_home
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup
from contextlib import closing, suppress
from datetime import datetime, timedelta, timezone
from .admin_creds import ADMIN_IDS
from database.db_api import get_connection  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter, TelegramNetworkError
from decimal import Decimal, ROUND_HALF_UP


admin_router = Router()

@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùåÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå")
        print(message.from_user.id)
        return
    else:
        await message.answer("‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_kb)


PAGE_SIZE = 10  # —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
COST_PER_LINK = 1.0


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def build_users_pager_kb(page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []
    row = []
    if page > 0:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_list:{page-1}"))
    if page < total_pages - 1:
        row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_users_list:{page+1}"))
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_home")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@admin_router.callback_query(F.data.startswith("admin_users_list"))
async def admin_users_list_cb(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    parts = callback.data.split(":")
    page = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0

    users = get_all_users()
    total = len(users)
    if total == 0:
        await callback.message.edit_text("‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç ‚Äî")
        await callback.answer()
        return

    total_pages = max((total + PAGE_SIZE - 1) // PAGE_SIZE, 1)
    page = max(0, min(page, total_pages - 1))  # –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
    start, end = page * PAGE_SIZE, (page + 1) * PAGE_SIZE
    page_items = users[start:end]

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    lines = [f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä. {page+1}/{total_pages}, –≤—Å–µ–≥–æ: {total})\n"]
    for u in page_items:
        uid = u.get("id", "-")
        tid = u.get("telegram_id", "-")
        bal = u.get("balance", 0)
        bal_str = f"{float(bal):.3f}".rstrip("0").rstrip(".")
        banned = u.get("banned", 0)
        created_raw = u.get("created_at", "-")
        created = created_raw
        if created_raw and created_raw != "-":
            try:
                # –µ—Å–ª–∏ –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ
                dt = datetime.fromisoformat(str(created_raw))
                created = dt.strftime("%Y-%m-%d")  # —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞
            except Exception:
                created = str(created_raw).split()[0]  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –≤–∑—è—Ç—å –≤—Å—ë –¥–æ –ø—Ä–æ–±–µ–ª–∞

        lines.append(
            f"üë§ <code>{uid}</code> | üì® <code>{tid}</code> | üí∞ {bal_str} | üïí {created} | ‚õî {banned}"
        )

    text = "\n".join(lines)

    await callback.message.edit_text(
        text,
        reply_markup=build_users_pager_kb(page, total_pages),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_home")
async def admin_home_cb(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É
    with suppress(Exception):
        await callback.answer()

    text = "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"

    try:
        if isinstance(admin_kb, InlineKeyboardMarkup):
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.edit_text(
                text,
                reply_markup=admin_kb,
                disable_web_page_preview=True
            )
        else:
            # –ï—Å–ª–∏ admin_kb ‚Äî ReplyKeyboardMarkup, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è: —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(text, reply_markup=admin_kb)
            # –ü–æ –∂–µ–ª–∞–Ω–∏—é —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–æ–π (–µ—Å–ª–∏ –±—ã–ª–æ)
            with suppress(Exception):
                await callback.message.delete()

    except TelegramBadRequest:
        # –ù–∞–ø—Ä–∏–º–µ—Ä: "message is not modified" / "can't be edited"
        await callback.message.answer(text, reply_markup=admin_kb)
        with suppress(Exception):
            await callback.message.delete()

    except TelegramNetworkError:
        # –°–µ—Ç–µ–≤–æ–π —Å–±–æ–π ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text, reply_markup=admin_kb)

    finally:
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –±—ã–ª–æ
        with suppress(Exception):
            await state.clear()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM
class WaitForSMTHUser(StatesGroup):
    waiting_id = State()
    waiting_id_for_ban = State()
    waiting_id_for_unban = State()
    waiting_for_amount_to_change_balance = State()
    waiting_text = State()
    waiting_count_clicks = State()





@admin_router.callback_query(F.data.startswith("admin_user_search"))
async def admin_user_search(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    await callback.message.edit_text(
        text="üîé –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>telegram ID</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        parse_mode="HTML",
        reply_markup=admin_home   # –∏–ª–∏ admin_home, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    await state.set_state(WaitForSMTHUser.waiting_id)


ADMIN_PAGE_SIZE = 10  # —Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

def _fmt_money(x) -> str:
    try:
        return f"{Decimal(str(x)):.3f}".rstrip("0").rstrip(".")
    except Exception:
        return str(x)

def _fetch_user_invoices(user_id: int, offset: int, limit: int):
    conn = get_connection(); cur = conn.cursor()
    cur.execute("SELECT COUNT(*) AS cnt FROM invoices WHERE user_id=?", (user_id,))
    total = (cur.fetchone() or {"cnt": 0})["cnt"]
    cur.execute(
        "SELECT invoice_id, amount, asset, status, payload, created_at "
        "FROM invoices WHERE user_id=? "
        "ORDER BY created_at DESC, rowid DESC "
        "LIMIT ? OFFSET ?",
        (user_id, limit, offset)
    )
    rows = [dict(r) for r in cur.fetchall()]
    conn.close()
    return total, rows

def _fetch_user_links(user_id: int, offset: int, limit: int):
    conn = get_connection(); cur = conn.cursor()
    cur.execute("SELECT COUNT(*) AS cnt FROM links WHERE user_id=?", (user_id,))
    total = (cur.fetchone() or {"cnt": 0})["cnt"]
    cur.execute(
        "SELECT original_url, link, short_host, clicks, max_clicks, created_at "
        "FROM links WHERE user_id=? "
        "ORDER BY created_at DESC, rowid DESC "
        "LIMIT ? OFFSET ?",
        (user_id, limit, offset)
    )
    rows = [dict(r) for r in cur.fetchall()]
    conn.close()
    return total, rows

def _admin_user_kb(telegram_id: int, user_id: int, inv_page: int = 0, lnk_page: int = 0,
                   inv_pages: int = 1, lnk_pages: int = 1) -> InlineKeyboardMarkup:
    # –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–æ–π—Å–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
    inv_controls = []
    if inv_page > 0:
        inv_controls.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ò–Ω–≤–æ–π—Å—ã", callback_data=f"admin:uid:{user_id}:inv:{inv_page-1}:{lnk_page}"))
    if inv_page < inv_pages - 1:
        inv_controls.append(InlineKeyboardButton(text="–ò–Ω–≤–æ–π—Å—ã ‚û°Ô∏è", callback_data=f"admin:uid:{user_id}:inv:{inv_page+1}:{lnk_page}"))

    lnk_controls = []
    if lnk_page > 0:
        lnk_controls.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –°—Å—ã–ª–∫–∏", callback_data=f"admin:uid:{user_id}:lnk:{inv_page}:{lnk_page-1}"))
    if lnk_page < lnk_pages - 1:
        lnk_controls.append(InlineKeyboardButton(text="–°—Å—ã–ª–∫–∏ ‚û°Ô∏è", callback_data=f"admin:uid:{user_id}:lnk:{inv_page}:{lnk_page+1}"))

    rows = []
    if inv_controls:
        rows.append(inv_controls)
    if lnk_controls:
        rows.append(lnk_controls)
    rows.append([InlineKeyboardButton(text="üè† –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_home")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _render_user_card_and_lists(user: dict, inv_page: int, lnk_page: int) -> tuple[str, InlineKeyboardMarkup]:
    # –∫–∞—Ä—Ç–æ—á–∫–∞
    bal_str = _fmt_money(user.get('balance', 0))
    header = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
        f"‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID: <code>{user['id']}</code>\n"
        f"‚Ä¢ Telegram ID: <code>{user['telegram_id']}</code>\n"
        f"‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å: {bal_str} USDT\n"
        f"‚Ä¢ üïí –°–æ–∑–¥–∞–Ω: {user.get('created_at', 'N/A')} UTC\n"
        f"‚Ä¢ üö´ –ë–∞–Ω: {bool(user.get('banned'))}\n\n"
    )

    # –∏–Ω–≤–æ–π—Å—ã
    inv_total, inv_rows = _fetch_user_invoices(user['id'], inv_page * ADMIN_PAGE_SIZE, ADMIN_PAGE_SIZE)
    inv_pages = max(1, (inv_total + ADMIN_PAGE_SIZE - 1) // ADMIN_PAGE_SIZE)
    inv_block = [f"üìë –ò–Ω–≤–æ–π—Å—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {inv_page+1}/{inv_pages}; –≤—Å–µ–≥–æ {inv_total})\n"]
    if inv_rows:
        for r in inv_rows:
            inv_block.append(
                f"üí≥ <b>{r['status']}</b> ‚Äî <code>{r['invoice_id']}</code>\n"
                f"üí∞ –°—É–º–º–∞: {_fmt_money(r['amount'])} {r.get('asset', '')}\n"
                f"‚è∞ {r.get('created_at', 'N/A')} UTC\n"
            )
    else:
        inv_block.append("‚Äî –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
    inv_block.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    # —Å—Å—ã–ª–∫–∏
    lnk_total, lnk_rows = _fetch_user_links(user['id'], lnk_page * ADMIN_PAGE_SIZE, ADMIN_PAGE_SIZE)
    lnk_pages = max(1, (lnk_total + ADMIN_PAGE_SIZE - 1) // ADMIN_PAGE_SIZE)
    lnk_block = [f"üîó –°—Å—ã–ª–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {lnk_page+1}/{lnk_pages}; –≤—Å–µ–≥–æ {lnk_total})"]
    if lnk_rows:
        for r in lnk_rows:
            slug = r.get("link", "N/A")
            host = (r.get("short_host") or "").strip()

            short = f"{PREFERRED_SCHEME}://{host}/link/{slug}"


            lnk_block.append(
                f"‚Äî <code>{r.get('original_url', 'N/A')}</code>\n"
                f"  ‚û°Ô∏è <code>{short}</code>\n"
                f"  üëÄ {int(r.get('clicks', 0))}/{int(r.get('max_clicks', 1))}\n"
                f"  üïí {r.get('created_at', 'N/A')} UTC"
            )
    else:
        lnk_block.append("‚Äî –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")

    text = header + "\n".join(inv_block + [""] + lnk_block)
    kb = _admin_user_kb(user['telegram_id'], user['id'], inv_page, lnk_page, inv_pages, lnk_pages)
    return text, kb

# === –í–≤–æ–¥ Telegram ID –∞–¥–º–∏–Ω–æ–º ===
@admin_router.message(WaitForSMTHUser.waiting_id, F.text)
async def process_user_id(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        tid = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π <b>Telegram ID</b> (—á–∏—Å–ª–æ)", parse_mode="HTML")
        return

    user = get_user(tid)  # –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å dict —Å –ø–æ–ª—è–º–∏ id, telegram_id, balance, created_at, banned
    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        text, kb = _render_user_card_and_lists(user, inv_page=0, lnk_page=0)
        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)

    await state.clear()

# === –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–æ–≤ ===
@admin_router.callback_query(F.data.regexp(r"^admin:uid:(\d+):inv:(\d+):(\d+)$"))
async def admin_user_invoices_page(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return

    m = callback.data.split(":")  # ["admin","uid","<user_id>","inv","<inv_page>","<lnk_page>"]
    user_id = int(m[2]); inv_page = int(m[4]); lnk_page = int(m[5])

    # –¥–æ—Å—Ç–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É id
    conn = get_connection(); cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer(); return
    user = dict(row)

    text, kb = _render_user_card_and_lists(user, inv_page=inv_page, lnk_page=lnk_page)
    await callback.message.edit_text(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    await callback.answer()

# === –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ ===
@admin_router.callback_query(F.data.regexp(r"^admin:uid:(\d+):lnk:(\d+):(\d+)$"))
async def admin_user_links_page(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True); return

    m = callback.data.split(":")  # ["admin","uid","<user_id>","lnk","<inv_page>","<lnk_page>"]
    user_id = int(m[2]); inv_page = int(m[4]); lnk_page = int(m[5])

    conn = get_connection(); cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer(); return
    user = dict(row)

    text, kb = _render_user_card_and_lists(user, inv_page=inv_page, lnk_page=lnk_page)
    await callback.message.edit_text(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    await callback.answer()




@admin_router.callback_query(F.data.startswith("admin_ban"))
async def admin_ban(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    await callback.message.edit_text(
        text="üîé –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>telegram ID</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞",
        parse_mode="HTML",
        reply_markup=admin_home   # –∏–ª–∏ admin_home, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    await state.set_state(WaitForSMTHUser.waiting_id_for_ban)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º ID –æ—Ç –∞–¥–º–∏–Ω–∞
@admin_router.message(WaitForSMTHUser.waiting_id_for_ban, F.text)
async def process_ban_user(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        tid = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π <b>ID</b> (—á–∏—Å–ª–æ)", parse_mode="HTML")
        return
    user, error = ban_user(tid)

    if error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    bal_str = f"{float(user['balance']):.3f}".rstrip("0").rstrip(".")
    text = (
        f"üë§ ID: <code>{user['id']}</code>\n"
        f"üì® Telegram ID: <code>{tid}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal_str}\n"
        f"üïí –°–æ–∑–¥–∞–Ω: {user['created_at']}\n"
        f"‚õî –ë–∞–Ω: {user['banned']}"
    )
    await message.answer(text, parse_mode="HTML")
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@admin_router.callback_query(F.data.startswith("admin_unban"))
async def admin_unban(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    await callback.message.edit_text(
        text="üîé –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>telegram ID</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞",
        parse_mode="HTML",
        reply_markup=admin_home   # –∏–ª–∏ admin_home, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    await state.set_state(WaitForSMTHUser.waiting_id_for_unban)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º ID –æ—Ç –∞–¥–º–∏–Ω–∞
@admin_router.message(WaitForSMTHUser.waiting_id_for_unban, F.text)
async def process_unban_user(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        tid = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π <b>ID</b> (—á–∏—Å–ª–æ)", parse_mode="HTML")
        return
    user, error = unban_user(tid)

    if error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    bal_str = f"{float(user['balance']):.3f}".rstrip("0").rstrip(".")
    text = (
        f"üë§ ID: <code>{user['id']}</code>\n"
        f"üì® Telegram ID: <code>{tid}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal_str}\n"
        f"üïí –°–æ–∑–¥–∞–Ω: {user['created_at']}\n"
        f"‚õî –ë–∞–Ω: {user['banned']}"
    )
    await message.answer(text, parse_mode="HTML")
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@admin_router.callback_query(F.data.startswith("admin_edit_balance"))
async def admin_edit_balance(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    await callback.message.edit_text(
        text=(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>telegram_id:—Å—É–º–º–∞</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>123456789:10.5</code> (–ø—Ä–∏–±–∞–≤–∏—Ç—å)\n"
            "<code>123456789:-3</code> (–≤—ã—á–µ—Å—Ç—å)"
        ),
        parse_mode="HTML",
        reply_markup=admin_home  # –∏–ª–∏ admin_home, —Å–º–æ—Ç—Ä—è —á—Ç–æ —É —Ç–µ–±—è
    )
    await state.set_state(WaitForSMTHUser.waiting_for_amount_to_change_balance)


@admin_router.message(WaitForSMTHUser.waiting_for_amount_to_change_balance, F.text)
async def process_change_balance(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    raw = message.text.strip()
    # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: telegram_id:amount
    try:
        if ":" not in raw:
            raise ValueError("format")
        left, right = [p.strip() for p in raw.split(":", 1)]
        tid = int(left)
        amount = Decimal(right.replace(",", "."))  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>123456789:10.5</code>", parse_mode="HTML")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–æ–∑—å–º—ë–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å
    user = get_user(tid)
    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    old_bal = Decimal(str(user["balance"])).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
    old_bal_str = f"{old_bal.normalize():f}"

    # –ò–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
    res = False
    new_balance = None
    error = None

    try:
        if amount < 0:
            # minus_balance –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É
            res, new_balance, error = minus_balance(tid, abs(amount))
        else:
            ok = add_balance(tid, float(amount))   # add_balance —Ä–∞–±–æ—Ç–∞–µ—Ç —Å float
            if not ok:
                res, error = False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
            else:
                after = get_user(tid)
                if not after:
                    res, error = False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
                else:
                    new_balance = Decimal(str(after["balance"])).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
                    res, error = True, None
    except Exception as e:
        res, error = False, f"–û—à–∏–±–∫–∞ –ë–î: {e}"

    if error:
        await message.answer(f"‚ö†Ô∏è {error}")
        await state.clear()
        return

    if not res:
        await message.answer("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        await state.clear()
        return

    new_bal_str = f"{new_balance.normalize():f}"

    text = (
        f"üë§ ID: <code>{user['id']}</code>\n"
        f"üì® Telegram ID: <code>{tid}</code>\n"
        f"üí∞ –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {old_bal_str}\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_bal_str}</b>\n"
        f"üïí –°–æ–∑–¥–∞–Ω: {user['created_at']}\n"
        f"‚õî –ë–∞–Ω: {user.get('banned', 0)}"
    )
    await message.answer(text, parse_mode="HTML")
    await state.clear()


def _utc_iso(dt: datetime) -> str:
    """–°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM:SS' (UTC) –¥–ª—è SQLite."""
    return dt.replace(tzinfo=timezone.utc).strftime("%Y-%m-%d %H:%M:%S")


def get_stats_simple():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    users_total / users_1d / users_7d / users_banned
    links_total / links_1d / links_7d
    clicks_total / clicks_1d=0 / clicks_7d=0
    active_users_1d: —Å–ø–∏—Å–æ–∫ {id, telegram_id, last_activity}
    """
    conn = get_connection()
    with closing(conn):
        cur = conn.cursor()

        now = datetime.utcnow()
        day_ago = _utc_iso(now - timedelta(days=1))
        week_ago = _utc_iso(now - timedelta(days=7))

        # ---- USERS ----
        cur.execute("SELECT COUNT(*) AS c FROM users")
        users_total = cur.fetchone()["c"]

        cur.execute("SELECT COUNT(*) AS c FROM users WHERE created_at >= ?", (day_ago,))
        users_1d = cur.fetchone()["c"]

        cur.execute("SELECT COUNT(*) AS c FROM users WHERE created_at >= ?", (week_ago,))
        users_7d = cur.fetchone()["c"]

        users_banned = 0
        with suppress(Exception):
            cur.execute("SELECT COUNT(*) AS c FROM users WHERE banned = 1")
            users_banned = cur.fetchone()["c"]

        # ---- LINKS ----
        cur.execute("SELECT COUNT(*) AS c FROM links")
        links_total = cur.fetchone()["c"]

        cur.execute("SELECT COUNT(*) AS c FROM links WHERE created_at >= ?", (day_ago,))
        links_1d = cur.fetchone()["c"]

        cur.execute("SELECT COUNT(*) AS c FROM links WHERE created_at >= ?", (week_ago,))
        links_7d = cur.fetchone()["c"]

        # ---- CLICKS ---- (–∞–≥—Ä–µ–≥–∞—Ç –∏–∑ links)
        cur.execute("SELECT COALESCE(SUM(clicks), 0) AS s FROM links")
        clicks_total = cur.fetchone()["s"] or 0
        clicks_1d = 0   # —Ç–∞–∫ –∫–∞–∫ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–∫–æ–≤ –Ω–µ—Ç, –∑–∞ –ø–µ—Ä–∏–æ–¥—ã —Å—á–∏—Ç–∞—Ç—å –Ω–µ—á–µ–º
        clicks_7d = 0

        # ---- ACTIVE USERS (24h): —Å–æ–∑–¥–∞–ª–∏ —Å—Å—ã–ª–∫–∏ ----
        cur.execute("""
            SELECT u.id, u.telegram_id, MAX(l.created_at) AS last_activity
            FROM users u
            JOIN links l ON l.user_id = u.id
            WHERE l.created_at >= ?
            GROUP BY u.id, u.telegram_id
            ORDER BY last_activity DESC
        """, (day_ago,))
        rows = cur.fetchall()
        active_users_1d = [
            {
                "id": r["id"] if hasattr(r, "keys") else r[0],
                "telegram_id": r["telegram_id"] if hasattr(r, "keys") else r[1],
                "last_activity": r["last_activity"] if hasattr(r, "keys") else r[2],
            }
            for r in rows
        ]

        return {
            "users_total": users_total,
            "users_1d": users_1d,
            "users_7d": users_7d,
            "users_banned": users_banned,

            "links_total": links_total,
            "links_1d": links_1d,
            "links_7d": links_7d,

            "clicks_total": int(clicks_total),
            "clicks_1d": int(clicks_1d),
            "clicks_7d": int(clicks_7d),

            "active_users_1d": active_users_1d,
        }


@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_cb(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    stats = get_stats_simple()

    def fmt_int(n):
        try:
            return f"{int(n)}"
        except Exception:
            return str(n)

    # —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    active_lines = []
    for u in stats["active_users_1d"][:50]:
        uid = u.get("id", "-")
        tid = u.get("telegram_id", "-")
        last = u.get("last_activity", "-")
        if isinstance(last, str) and " " in last:
            last = last[:16]  # YYYY-MM-DD HH:MM
        active_lines.append(
            f"üÜî DB:<code>{uid}</code> | üí¨ TG:<code>{tid}</code> | üïí {last}"
        )

    text = "\n".join([
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n",

        "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> üë•",
        f"üë§ –í—Å–µ–≥–æ: <b>{fmt_int(stats['users_total'])}</b>",
        f"‚è∞ –ó–∞ 24 —á: {fmt_int(stats['users_1d'])}",
        f"üìÖ –ó–∞ 7 –¥:  {fmt_int(stats['users_7d'])}",
        f"‚õî –ó–∞–±–∞–Ω–µ–Ω—ã: {fmt_int(stats['users_banned'])}",

        "",
        "üîó <b>–°—Å—ã–ª–∫–∏</b> üîó",
        f"üìé –í—Å–µ–≥–æ: <b>{fmt_int(stats['links_total'])}</b>",
        f"‚è∞ –ó–∞ 24 —á: {fmt_int(stats['links_1d'])}",
        f"üìÖ –ó–∞ 7 –¥:  {fmt_int(stats['links_7d'])}",

        "",
        "üëÄ <b>–ö–ª–∏–∫–∏</b> üëÄ",
        f"üî¢ –í—Å–µ–≥–æ: <b>{fmt_int(stats['clicks_total'])}</b>",
        f"‚è∞ –ó–∞ 24 —á: {fmt_int(stats['clicks_1d'])}",
        f"üìÖ –ó–∞ 7 –¥:  {fmt_int(stats['clicks_7d'])}",

        "",
        "‚ö° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á</b> (—Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å—Å—ã–ª–∫–∏):",
        *(active_lines or ["‚Äî –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî"]),
    ])

    with suppress(Exception):
        await callback.answer()

    try:
        if isinstance(admin_home, InlineKeyboardMarkup):
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
        else:
            await callback.message.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
            with suppress(Exception):
                await callback.message.delete()
    except (TelegramBadRequest, TelegramNetworkError):
        await callback.message.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=admin_home
        )


def _period_bounds(days: int) -> tuple[str, str]:
    now = datetime.utcnow()
    frm = _utc_iso(now - timedelta(days=days))
    to  = _utc_iso(now)
    return frm, to


def _sum_invoices_by_asset(cur, frm_iso: str | None, to_iso: str | None) -> dict[str, dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ –∞–∫—Ç–∏–≤–∞–º:
      { "USDT": {"amount": 23.0, "count": 7}, "TRX": {"amount": 20.0, "count": 3}, ... }
    –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å 'paid'. –ï—Å–ª–∏ frm/to None ‚Äî –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
    """
    params = []
    where = "WHERE status = 'paid'"
    if frm_iso and to_iso:
        where += " AND created_at BETWEEN ? AND ?"
        params += [frm_iso, to_iso]

    cur.execute(f"""
        SELECT asset, COALESCE(SUM(amount),0) AS total, COUNT(*) AS cnt
        FROM invoices
        {where}
        GROUP BY asset
        ORDER BY asset
    """, tuple(params))

    res = {}
    for r in cur.fetchall():
        asset = (r["asset"] if hasattr(r, "keys") else r[0]) or ""
        total = float((r["total"] if hasattr(r, "keys") else r[1]) or 0)
        cnt   = int((r["cnt"]   if hasattr(r, "keys") else r[2]) or 0)
        res[asset] = {"amount": total, "count": cnt}
    return res

def _links_count(cur, frm_iso: str | None, to_iso: str | None) -> int:
    if frm_iso and to_iso:
        cur.execute("SELECT COUNT(*) AS c FROM links WHERE created_at BETWEEN ? AND ?", (frm_iso, to_iso))
    else:
        cur.execute("SELECT COUNT(*) AS c FROM links")
    return int(cur.fetchone()["c"] or 0)

@admin_router.callback_query(F.data == "admin_income")
async def admin_income_cb(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    day_from, day_to     = _period_bounds(1)
    week_from, week_to   = _period_bounds(7)
    month_from, month_to = _period_bounds(30)

    conn = get_connection()
    with closing(conn):
        cur = conn.cursor()
        have_invoices = _exists(cur, "invoices")

        if have_invoices:
            day_assets    = _sum_invoices_by_asset(cur, day_from,   day_to)
            week_assets   = _sum_invoices_by_asset(cur, week_from,  week_to)
            month_assets  = _sum_invoices_by_asset(cur, month_from, month_to)
            all_assets    = _sum_invoices_by_asset(cur, None, None)
        else:
            # –±–µ–∑ invoices: —Å—á–∏—Ç–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–∞–º
            day_links    = _links_count(cur, day_from,   day_to)
            week_links   = _links_count(cur, week_from,  week_to)
            month_links  = _links_count(cur, month_from, month_to)
            all_links    = _links_count(cur, None, None)

    title = "üíµ <b>–î–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n"
    hint  = "üßæ –ò—Å—Ç–æ—á–Ω–∏–∫: <i>invoices (paid)</i>\n" if have_invoices else \
            f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: <i>—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ √ó —Ü–µ–Ω—É</i> (COST_PER_LINK={_fmt_num(COST_PER_LINK)})\n"

    def block_from_assets(header: str, assets: dict[str, dict]) -> list[str]:
        lines = [header]
        if not assets:
            lines.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
            return lines
        # —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–∞–º)
        total_cnt = sum(v["count"] for v in assets.values())
        lines.append(f"üì¶ –ö–æ–ª-–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: <b>{total_cnt}</b>")
        lines.append("üí± –ü–æ –≤–∞–ª—é—Ç–∞–º:")
        for asset, info in assets.items():
            lines.append(f"ü™ô {asset}: <b>{_fmt_num(info['amount'])}</b> (üßæ {info['count']})")
        return lines

    def block_from_links(header: str, count_links: int) -> list[str]:
        amount = count_links * float(COST_PER_LINK)
        return [
            header,
            f"üîó –°–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫: <b>{count_links}</b>",
            f"üí∞ –î–æ—Ö–æ–¥: <b>{_fmt_num(amount)}</b>",
        ]

    text_lines = [title, hint]

    if have_invoices:
        text_lines += [
            "‚è∞ <b>–ó–∞ —Å—É—Ç–∫–∏</b>",
            *block_from_assets("", day_assets),
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π</b>",
            *block_from_assets("", week_assets),
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "üóì <b>–ó–∞ 30 –¥–Ω–µ–π</b>",
            *block_from_assets("", month_assets),
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "‚ôæ <b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è</b>",
            *block_from_assets("", all_assets),
        ]
    else:
        text_lines += [
            "‚è∞ <b>–ó–∞ —Å—É—Ç–∫–∏</b>",
            *block_from_links("", day_links),
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π</b>",
            *block_from_links("", week_links),
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "üóì <b>–ó–∞ 30 –¥–Ω–µ–π</b>",
            *block_from_links("", month_links),
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "‚ôæ <b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è</b>",
            *block_from_links("", all_links),
        ]

    text = "\n".join(text_lines)

    with suppress(Exception):
        await callback.answer()

    try:
        if isinstance(admin_home, InlineKeyboardMarkup):
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
        else:
            await callback.message.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
            with suppress(Exception):
                await callback.message.delete()
    except (TelegramBadRequest, TelegramNetworkError):
        await callback.message.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=admin_home
        )


def _exists(cur, table: str) -> bool:
    cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,))
    return cur.fetchone() is not None

def _fmt_num(x) -> str:
    try:
        return f"{float(x):.3f}".rstrip("0").rstrip(".")
    except Exception:
        return str(x)

def _fmt_dt(s: str) -> str:
    # "YYYY-MM-DD HH:MM:SS" -> "YYYY-MM-DD HH:MM"
    if isinstance(s, str) and " " in s:
        return s[:16]
    return str(s)

def _short_host(u: str) -> str:
    if not u:
        return "-"
    try:
        p = urlsplit(u)
        host = p.netloc or (p.path.split("/")[0] if p.path else "")
        return host or u
    except Exception:
        return u

def _mask_link_id(s: str) -> str:
    if not s:
        return "-"
    s = str(s)
    if len(s) <= 14:
        return s
    return f"{s[:6]}‚Ä¶{s[-4:]}"

# ========== core queries ==========

def _get_activity_24h():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {
        "new_users": int,
        "new_links": int,
        "income_assets": {ASSET: {"amount": float, "count": int}},
        "active_users": [ {id, telegram_id, links_count, last_activity}, ... ],
        "recent_links": [ {link, original_url, created_at, telegram_id}, ... ],
      }
    """
    now = datetime.utcnow()
    since = _utc_iso(now - timedelta(days=1))

    conn = get_connection()
    with closing(conn):
        cur = conn.cursor()

        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24—á
        cur.execute("SELECT COUNT(*) AS c FROM users WHERE created_at >= ?", (since,))
        new_users = int(cur.fetchone()["c"] or 0)

        # –°–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫ –∑–∞ 24—á
        cur.execute("SELECT COUNT(*) AS c FROM links WHERE created_at >= ?", (since,))
        new_links = int(cur.fetchone()["c"] or 0)

        # –î–æ—Ö–æ–¥ –∑–∞ 24—á –ø–æ –≤–∞–ª—é—Ç–∞–º –∏–∑ invoices (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å)
        income_assets = {}
        if _exists(cur, "invoices"):
            cur.execute("""
                SELECT UPPER(asset) AS asset, COALESCE(SUM(amount),0) AS total, COUNT(*) AS cnt
                FROM invoices
                WHERE status='paid' AND created_at >= ?
                GROUP BY UPPER(asset)
                ORDER BY asset
            """, (since,))
            for r in cur.fetchall():
                asset = r["asset"]
                total = float(r["total"] or 0)
                cnt   = int(r["cnt"] or 0)
                income_assets[asset] = {"amount": total, "count": cnt}

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å—Å—ã–ª–∫–∏ –∑–∞ 24—á)
        cur.execute("""
            SELECT u.id, u.telegram_id, COUNT(l.id) AS links_count, MAX(l.created_at) AS last_activity
            FROM users u
            JOIN links l ON l.user_id = u.id
            WHERE l.created_at >= ?
            GROUP BY u.id, u.telegram_id
            ORDER BY last_activity DESC
        """, (since,))
        active_users = [{
            "id": r["id"],
            "telegram_id": r["telegram_id"],
            "links_count": int(r["links_count"] or 0),
            "last_activity": r["last_activity"],
        } for r in cur.fetchall()]

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Å—ã–ª–æ–∫ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ 24—á)
        N = 10
        cur.execute("""
                    SELECT l.link, l.short_host, l.original_url, l.created_at, u.telegram_id
                    FROM links l
                             JOIN users u ON u.id = l.user_id
                    WHERE l.created_at >= ?
                    ORDER BY l.created_at DESC LIMIT ?
                    """, (since, N))
        recent_links = [{
            "link": r["link"],
            "short_host": r["short_host"],
            "original_url": r["original_url"],
            "created_at": r["created_at"],
            "telegram_id": r["telegram_id"],
        } for r in cur.fetchall()]

        return {
            "new_users": new_users,
            "new_links": new_links,
            "income_assets": income_assets,   # –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç invoices
            "active_users": active_users,
            "recent_links": recent_links,
        }

# ========== handler ==========

@admin_router.callback_query(F.data == "admin_activity_day")
async def admin_activity_day_cb(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    data = _get_activity_24h()

    # --- —Å–≤–æ–¥–∫–∞ ---
    lines = [
        "üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞</b>\n",
        f"üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{data['new_users']}</b>",
        f"üîó –°–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫: <b>{data['new_links']}</b>",
    ]

    # --- –¥–æ—Ö–æ–¥ –ø–æ –≤–∞–ª—é—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å invoices) ---
    if data["income_assets"]:
        lines += [
            "",
            "üíµ <b>–î–æ—Ö–æ–¥ –∑–∞ 24—á (–ø–æ –≤–∞–ª—é—Ç–∞–º)</b>",
            f"üßæ –ü–ª–∞—Ç–µ–∂–µ–π: <b>{sum(v['count'] for v in data['income_assets'].values())}</b>",
            "üí± –†–∞–∑–±–∏–≤–∫–∞:",
        ]
        for asset, info in data["income_assets"].items():
            lines.append(f"ü™ô {asset}: <b>{_fmt_num(info['amount'])}</b> (üßæ {info['count']})")

    # --- –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
    lines += ["", "‚ö° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å—Å—ã–ª–∫–∏)</b>"]
    if data["active_users"]:
        for u in data["active_users"][:50]:
            lines.append(
                f"üÜî DB:<code>{u['id']}</code> | "
                f"üí¨ TG:<code>{u['telegram_id']}</code> | "
                f"üîó {u['links_count']} | "
                f"üïí {_fmt_dt(u['last_activity'])}"
            )
    else:
        lines.append("‚Äî –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî")

    # --- –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–∫—Ä–∞—Å–∏–≤–æ –∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ) ---
    lines += ["", "üß∑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏</b>"]
    if data["recent_links"]:
        for i, r in enumerate(data["recent_links"], 1):
            created = _fmt_dt(r["created_at"])
            masked  = _mask_link_id(r["link"])
            host = (r.get("short_host") or "").strip()

            short_url = f"{PREFERRED_SCHEME}://{host}/link/{r['link']}"

            lines.append(
                f"{i}. üîó <a href=\"{short_url}\">{masked}</a> | "
                f"üí¨ TG:<code>{r['telegram_id']}</code> | "
                f"üïí {created} | üåê {host}"
            )
    else:
        lines.append("‚Äî –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ ‚Äî")

    text = "\n".join(lines)

    # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª —É –∫–Ω–æ–ø–∫–∏
    with suppress(Exception):
        await callback.answer()

    # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å (edit_text –¥–ª—è inline-–∫–ª–∞–≤—ã, –∏–Ω–∞—á–µ answer)
    try:
        if isinstance(admin_home, InlineKeyboardMarkup):
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
        else:
            await callback.message.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
            with suppress(Exception):
                await callback.message.delete()
    except (TelegramBadRequest, TelegramNetworkError):
        await callback.message.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=admin_home
        )

def _get_activity_7d():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:
      {
        "new_users": int,
        "new_links": int,
        "income_assets": {ASSET: {"amount": float, "count": int}},
        "active_users": [ {id, telegram_id, links_count, last_activity}, ... ],
        "recent_links": [ {link, original_url, created_at, telegram_id}, ... ],
      }
    """
    now = datetime.utcnow()
    since = _utc_iso(now - timedelta(days=7))

    conn = get_connection()
    with closing(conn):
        cur = conn.cursor()

        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 7–¥
        cur.execute("SELECT COUNT(*) AS c FROM users WHERE created_at >= ?", (since,))
        new_users = int(cur.fetchone()["c"] or 0)

        # –°–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫ –∑–∞ 7–¥
        cur.execute("SELECT COUNT(*) AS c FROM links WHERE created_at >= ?", (since,))
        new_links = int(cur.fetchone()["c"] or 0)

        # –î–æ—Ö–æ–¥ –∑–∞ 7–¥ –ø–æ –≤–∞–ª—é—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å invoices)
        income_assets = {}
        if _exists(cur, "invoices"):
            cur.execute("""
                SELECT UPPER(asset) AS asset, COALESCE(SUM(amount),0) AS total, COUNT(*) AS cnt
                FROM invoices
                WHERE status='paid' AND created_at >= ?
                GROUP BY UPPER(asset)
                ORDER BY asset
            """, (since,))
            for r in cur.fetchall():
                asset = r["asset"]
                total = float(r["total"] or 0)
                cnt   = int(r["cnt"] or 0)
                income_assets[asset] = {"amount": total, "count": cnt}

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å—Å—ã–ª–∫–∏ –∑–∞ 7–¥)
        cur.execute("""
            SELECT u.id, u.telegram_id, COUNT(l.id) AS links_count, MAX(l.created_at) AS last_activity
            FROM users u
            JOIN links l ON l.user_id = u.id
            WHERE l.created_at >= ?
            GROUP BY u.id, u.telegram_id
            ORDER BY last_activity DESC
        """, (since,))
        active_users = [{
            "id": r["id"],
            "telegram_id": r["telegram_id"],
            "links_count": int(r["links_count"] or 0),
            "last_activity": r["last_activity"],
        } for r in cur.fetchall()]

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∑–∞ 7–¥ (–≤–æ–∑—å–º—ë–º N –ø–æ–±–æ–ª—å—à–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 20)
        N = 20
        cur.execute("""
                    SELECT l.link, l.short_host, l.original_url, l.created_at, u.telegram_id
                    FROM links l
                             JOIN users u ON u.id = l.user_id
                    WHERE l.created_at >= ?
                    ORDER BY l.created_at DESC LIMIT ?
                    """, (since, N))
        recent_links = [{
            "link": r["link"],
            "short_host": r["short_host"],
            "original_url": r["original_url"],
            "created_at": r["created_at"],
            "telegram_id": r["telegram_id"],
        } for r in cur.fetchall()]

        return {
            "new_users": new_users,
            "new_links": new_links,
            "income_assets": income_assets,
            "active_users": active_users,
            "recent_links": recent_links,
        }


# ===== handler (7 days) =====

@admin_router.callback_query(F.data == "admin_activity_week")
async def admin_activity_week_cb(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    data = _get_activity_7d()

    # –°–≤–æ–¥–∫–∞
    lines = [
        "üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π</b>\n",
        f"üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{data['new_users']}</b>",
        f"üîó –°–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫: <b>{data['new_links']}</b>",
    ]

    # –î–æ—Ö–æ–¥ –ø–æ –≤–∞–ª—é—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å invoices)
    if data["income_assets"]:
        lines += [
            "",
            "üíµ <b>–î–æ—Ö–æ–¥ –∑–∞ 7 –¥–Ω–µ–π (–ø–æ –≤–∞–ª—é—Ç–∞–º)</b>",
            f"üßæ –ü–ª–∞—Ç–µ–∂–µ–π: <b>{sum(v['count'] for v in data['income_assets'].values())}</b>",
            "üí± –†–∞–∑–±–∏–≤–∫–∞:",
        ]
        for asset, info in data["income_assets"].items():
            lines.append(f"ü™ô {asset}: <b>{_fmt_num(info['amount'])}</b> (üßæ {info['count']})")

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    lines += ["", "‚ö° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å—Å—ã–ª–∫–∏)</b>"]
    if data["active_users"]:
        for u in data["active_users"][:50]:
            lines.append(
                f"üÜî DB:<code>{u['id']}</code> | "
                f"üí¨ TG:<code>{u['telegram_id']}</code> | "
                f"üîó {u['links_count']} | "
                f"üïí {_fmt_dt(u['last_activity'])}"
            )
    else:
        lines.append("‚Äî –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî")

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–º–∞—Å–∫–∞, –¥–æ–º–µ–Ω, –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —à–æ—Ä—Ç-URL)
    lines += ["", "üß∑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Å—ã–ª–∫–∏</b>"]
    if data["recent_links"]:
        for i, r in enumerate(data["recent_links"], 1):
            created = _fmt_dt(r["created_at"])
            masked  = _mask_link_id(r["link"])
            host = (r.get("short_host") or "").strip()
            short_url = f"{PREFERRED_SCHEME}://{host}/link/{r['link']}"

            lines.append(
                f"{i}. üîó <a href=\"{short_url}\">{masked}</a> | "
                f"üí¨ TG:<code>{r['telegram_id']}</code> | "
                f"üïí {created} | üåê {host}"
            )
    else:
        lines.append("‚Äî –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ ‚Äî")

    text = "\n".join(lines)

    # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª —É –∫–æ–ª–±—ç–∫–∞
    with suppress(Exception):
        await callback.answer()

    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ (edit_text –¥–ª—è inline-–∫–ª–∞–≤—ã, –∏–Ω–∞—á–µ answer)
    try:
        if isinstance(admin_home, InlineKeyboardMarkup):
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
        else:
            await callback.message.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=admin_home
            )
            with suppress(Exception):
                await callback.message.delete()
    except (TelegramBadRequest, TelegramNetworkError):
        await callback.message.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=admin_home
        )

# --- DB helper: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ TG ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def get_all_active_telegram_ids() -> list[int]:
    conn = get_connection()
    with closing(conn):
        cur = conn.cursor()
        # –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ banned –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ‚Äî –æ—Å—Ç–∞–≤–∏–º fallback
        try:
            cur.execute("SELECT telegram_id FROM users WHERE COALESCE(banned,0) = 0")
        except Exception:
            cur.execute("SELECT telegram_id FROM users")
        rows = cur.fetchall()
        return [int(r[0] if not hasattr(r, "keys") else r["telegram_id"]) for r in rows]

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def kb_broadcast_confirm() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")],
        [InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_home")],
    ])

# ====== start flow ======
@admin_router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    with suppress(Exception):
        await callback.answer()

    text = (
        "üì£ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω).\n\n"
        "üîí –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫ –±—É–¥–µ—Ç <b>–≤—ã–∫–ª—é—á–µ–Ω–æ</b> –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
    )
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_home)
    except Exception:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=admin_home)

    await state.set_state(WaitForSMTHUser.waiting_text)

# –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
@admin_router.message(WaitForSMTHUser.waiting_text, F.text)
async def admin_broadcast_preview(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return

    content = message.text.strip()
    if not content:
        await message.answer("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—Å—Ç –≤ FSM
    await state.update_data(broadcast_text=content)

    # –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä + –∫–Ω–æ–ø–∫–∏
    preview = "üñº <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>:\n\n" + content
    await message.answer(preview, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb_broadcast_confirm())

# –æ—Ç–º–µ–Ω–∞
@admin_router.callback_query(F.data == "broadcast_cancel")
async def admin_broadcast_cancel(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await state.clear()
    with suppress(Exception):
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    # –≤–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é
    try:
        await callback.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_home)
    except Exception:
        await callback.message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_home)

# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Üí –æ—Ç–ø—Ä–∞–≤–∫–∞
@admin_router.callback_query(F.data == "broadcast_send")
async def admin_broadcast_send(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    data = await state.get_data()
    content = data.get("broadcast_text")
    if not content:
        await callback.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞", show_alert=True)
        return

    with suppress(Exception):
        await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é‚Ä¶")

    # –∑–∞–±–µ—Ä—ë–º tg ids
    tg_ids = get_all_active_telegram_ids()
    total = len(tg_ids)
    delivered = 0
    failed = 0

    # –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    try:
        progress_msg = await callback.message.edit_text(
            f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n–û—à–∏–±–æ–∫: 0",
            parse_mode="HTML",
            reply_markup=admin_home
        )
    except Exception:
        progress_msg = await callback.message.answer(
            f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n–û—à–∏–±–æ–∫: 0",
            parse_mode="HTML",
            reply_markup=admin_home
        )

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å ¬´–±–µ—Ä–µ–∂–Ω–æ–π¬ª —Å–∫–æ—Ä–æ—Å—Ç—å—é
    # (–ø—Ä–æ—Å—Ç–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è ‚Äî –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏)
    for i, chat_id in enumerate(tg_ids, 1):
        try:
            await callback.bot.send_message(
                chat_id,
                content,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            delivered += 1
        except TelegramRetryAfter as e:
            # –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
            await asyncio.sleep(e.retry_after + 1)
            # –ø–æ–≤—Ç–æ—Ä–∏–º –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É
            try:
                await callback.bot.send_message(
                    chat_id,
                    content,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                delivered += 1
            except Exception:
                failed += 1
        except (TelegramForbiddenError, TelegramBadRequest, TelegramNetworkError, Exception):
            # –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ / –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Ç / –∏ —Ç.–ø.
            failed += 1

        # –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        if i % 20 == 0 or i == total:
            with suppress(Exception):
                await progress_msg.edit_text(
                    f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∏–¥—ë—Ç‚Ä¶\n"
                    f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{delivered}</b>\n"
                    f"–û—à–∏–±–æ–∫: <b>{failed}</b>",
                    parse_mode="HTML",
                    reply_markup=admin_home
                )

        # –±–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –ø—Ä–æ—Ç–∏–≤ —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–∞
        await asyncio.sleep(0.03)

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    with suppress(Exception):
        await state.clear()

    summary = (
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{delivered}</b>\n"
        f"–û—à–∏–±–æ–∫: <b>{failed}</b>"
    )
    try:
        await progress_msg.edit_text(summary, parse_mode="HTML", reply_markup=admin_home)
    except Exception:
        await callback.message.answer(summary, parse_mode="HTML", reply_markup=admin_home)


def change_count_clicks_safe(*, link_or_url: str, delta: int) -> tuple[bool, str, int | None]:
    """
    –ú–µ–Ω—è–µ—Ç max_clicks –Ω–∞ delta (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).
    –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ 0.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ slug, –ª–∏–±–æ –ø–æ–ª–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π URL –≤–∏–¥–∞ https://your.host/link/<slug>.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (ok, message, new_max_clicks | None)
    """
    slug = _extract_slug(link_or_url)
    if not slug:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –µ—ë slug.", None

    conn = get_connection()
    cur = conn.cursor()
    try:
        # –Ω–∞–π–¥—ë–º –∑–∞–ø–∏—Å—å
        cur.execute("SELECT id, link, max_clicks FROM links WHERE link = ?", (slug,))
        row = cur.fetchone()
        if not row:
            return False, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        cur.execute(
            "UPDATE links SET max_clicks = MAX(max_clicks + ?, 0) WHERE link = ?",
            (int(delta), slug)
        )
        conn.commit()

        # —á–∏—Ç–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cur.execute("SELECT max_clicks FROM links WHERE link = ?", (slug,))
        new_row = cur.fetchone()
        new_val = int(new_row["max_clicks"]) if new_row else None
        return True, "–ì–æ—Ç–æ–≤–æ.", new_val
    finally:
        conn.close()


def _extract_slug(s: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç slug –∏–∑:
      - 'abcdef123'
      - 'https://host/link/abcdef123'
      - 'http://host/link/abcdef123?x=1'
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî None.
    """
    s = (s or "").strip()
    if not s:
        return None

    # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π URL
    if "://" in s:
        try:
            from urllib.parse import urlparse
            p = urlparse(s)
            # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏
            path = (p.path or "").rstrip("/")
            if not path:
                return None
            slug = path.split("/")[-1]
            return slug or None
        except Exception:
            return None

    # –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Ä–∞–∑—É slug
    return s


def _extract_slug_strict(s: str) -> str | None:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å slug:
      - 'AbC123' (—á–∏—Å—Ç—ã–π slug)
      - 'https://host.tld/link/AbC123'
      - 'http://host.tld/link/AbC123?foo=1#bar'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç slug –∏–ª–∏ None.
    """
    s = (s or "").strip()
    if not s:
        return None

    if "://" in s:
        try:
            p = urlparse(s)
            path = (p.path or "").rstrip("/")
            if not path:
                return None
            # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç '/link/<slug>'
            parts = path.split("/")
            if len(parts) >= 3 and parts[-2] == "link":
                return parts[-1] or None
            # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∏–Ω–æ–π ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
            return None
        except Exception:
            return None

    # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ slug (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ '/')
    if "/" in s or " " in s or ":" in s:
        return None
    return s


def _build_short_by_slug(slug: str) -> str:
    """
    –î–æ—Å—Ç–∞—ë–º short_host –∏–∑ –ë–î –ø–æ slug –∏ —Å–æ–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É.
    """
    conn = get_connection()
    try:
        cur = conn.cursor()
        cur.execute("SELECT short_host FROM links WHERE link = ?", (slug,))
        row = cur.fetchone()
        if not row:
            raise ValueError(f"Slug '{slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")

        host = (row["short_host"] if hasattr(row, "keys") else row[0]).strip()
        return f"{PREFERRED_SCHEME}://{host}/link/{slug}"
    finally:
        conn.close()



@admin_router.callback_query(F.data == "clicks_up")
async def admin_clicks_up(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    text = (
        "üîß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∫–ª–∏–∫–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ slug</b> –∏ –≤–µ–ª–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
        "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ).\n\n"
        "–§–æ—Ä–º–∞—Ç: <code>–ö–æ—Ä–æ—Ç–∫–∞—è_—Å—Å—ã–ª–∫–∞_–ò–õ–ò_slug:–ß–∏—Å–ª–æ</code>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ <code>{PREFERRED_SCHEME}://your.host/link/AbC123:10</code> ‚Äî –ø—Ä–∏–±–∞–≤–∏—Ç—å 10\n"
        "‚Ä¢ <code>AbC123:-2</code> ‚Äî –æ—Ç–Ω—è—Ç—å 2\n\n"
        "‚ùóÔ∏è–ï—Å–ª–∏ —É–∫–∞–∂–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–Ω–µ—Ç 0 (–Ω–µ —É–π–¥—ë—Ç –≤ –º–∏–Ω—É—Å)."
    )
    with suppress(Exception):
        await callback.answer()

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_home)
    await state.set_state(WaitForSMTHUser.waiting_count_clicks)


@admin_router.message(WaitForSMTHUser.waiting_count_clicks, F.text)
async def process_change_clicks(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        return

    raw = (message.text or "").strip()

    # –ø–∞—Ä—Å–∏–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–≤–æ–µ—Ç–æ—á–∏—é, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞–ª–æ—Å—å –Ω–∞ "https://"
    if ":" not in raw:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>—Å—Å—ã–ª–∫–∞_–∏–ª–∏_slug:—á–∏—Å–ª–æ</code>\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>{PREFERRED_SCHEME}://your.host/link/AbC123:5</code> –∏–ª–∏ <code>AbC123:5</code>",
            parse_mode="HTML"
        )
        return

    url_part, delta_part = raw.rsplit(":", 1)
    url_part = url_part.strip()
    delta_part = delta_part.strip()

    # –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞
    try:
        delta = int(delta_part)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –∏–ª–∏ -2).")
        return

    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if not (-100000 <= delta <= 100000):
        await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ. –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç -100000 –¥–æ 100000.")
        return

    # –∏–∑–≤–ª–µ–∫–∞–µ–º slug (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –ø–æ–ª–Ω—É—é –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É, –∏ —á–∏—Å—Ç—ã–π slug)
    slug = _extract_slug_strict(url_part)
    if not slug:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É/slug.\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>{PREFERRED_SCHEME}://your.host/link/AbC123:5</code> –∏–ª–∏ <code>AbC123:5</code>",
            parse_mode="HTML"
        )
        return

    # –º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
    ok, msg, new_val = change_count_clicks_safe(link_or_url=slug, delta=delta)
    if not ok:
        await message.answer(f"‚ùå {msg}")
        return

    final_short = _build_short_by_slug(slug)

    await message.answer(
        f"‚úÖ {msg}\n"
        f"üîó –°—Å—ã–ª–∫–∞: <code>{final_short}</code>\n"
        f"Œî –∏–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{delta}</b>\n"
        f"üìå –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: <b>{new_val}</b>",
        parse_mode="HTML",
        reply_markup=admin_home
    )
    await state.clear()







