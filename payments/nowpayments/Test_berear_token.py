# bot.py
import asyncio
import logging
import os
from html import escape

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import CommandStart

API_TOKEN = '8367088884:AAGx_hVpKTJWIzAb0wI8K12OJRXmHe3dXd4'

router = Router()
logging.basicConfig(level=logging.INFO)


@router.message(CommandStart())
async def cmd_start(msg: types.Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚Äî —è –æ—Ç–ø—Ä–∞–≤–ª—é ID –∫–∞–Ω–∞–ª–∞.\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫, ID –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–ª—å–∑—è."
    )


@router.message(F.forward_from_chat)  # –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ)
async def handle_forward_old(msg: types.Message):
    ch = msg.forward_from_chat
    title = escape(ch.title or "")
    await msg.answer(
        f"üì° –ö–∞–Ω–∞–ª: <b>{title or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
        f"üÜî ID: <code>{ch.id}</code>",
        parse_mode="HTML"
    )


@router.message(F.forward_origin)  # –Ω–æ–≤–æ–µ –ø–æ–ª–µ forward_origin (MessageOrigin*)
async def handle_forward_new(msg: types.Message):
    """
    –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö —É –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ forward_origin.
    –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ MessageOriginChannel: –µ—Å—Ç—å .chat –∏ .message_id.
    """
    origin = msg.forward_origin
    # –î–ª—è aiogram v3 origin –º–æ–∂–µ—Ç –±—ã—Ç—å dict-like –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º –∫–ª–∞—Å—Å–∞.
    # –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å —á–∞—Ç.
    chat = getattr(origin, "chat", None)
    if chat and getattr(chat, "id", None):
        title = escape(getattr(chat, "title", "") or "")
        await msg.answer(
            f"üì° –ö–∞–Ω–∞–ª: <b>{title or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
            f"üÜî ID: <code>{chat.id}</code>",
            parse_mode="HTML"
        )
        return

    # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (—Å–∫—Ä—ã—Ç–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ / –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
    await msg.answer(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞: –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–∫—Ä—ã—Ç –∏–ª–∏ –∑–∞—â–∏—â—ë–Ω.",
    )


@router.message()  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
async def fallback(msg: types.Message):
    await msg.answer("–ü–µ—Ä–µ—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–Ω–µ –∏–∑ —á–∞—Ç–∞/–ª–∏—á–∫–∏).")


async def main():
    if not API_TOKEN:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.")
    bot = Bot(API_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())